{"version":3,"sources":["components/PageBarraPrincipal.tsx","pages/pacientes/ApiPacientes.ts","pages/pacientes/PageFormularioPaciente.tsx","pages/pacientes/TablaPaciente.tsx","pages/pacientes/PagePacientes.tsx","pages/medicos/ApiMedico.ts","pages/medicos/PageFormularioMedico.tsx","pages/medicos/TablaMedico.tsx","pages/medicos/PageMedicos.tsx","pages/habitaciones/ApiHabitaciones.ts","pages/habitaciones/PageFormularioHabitacion.tsx","pages/habitaciones/TablaHabitacion.tsx","pages/habitaciones/PageHabitaciones.tsx","pages/citas/ApiCitas.ts","pages/citas/PageFormularioCita.tsx","pages/citas/TablaCita.tsx","pages/citas/PageCitas.tsx","components/PageRutas.tsx","App.tsx","reportWebVitals.ts","index.tsx","images/admin.png"],"names":["MenuItems","Titulo","url","PageBarraPrincipal","react_default","a","createElement","className","id","alt","width","src","Img","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","map","item","i","key","dist","to","concat","style","color","height","URL","buscarPacientes","_callee2","lista","_regeneratorRuntime","wrap","_context2","prev","next","fetch","method","headers","Content-type","sent","json","abrupt","t0","undefined","stop","removerPaciente","_callee3","_context3","then","res","status","swal","icon","catch","err","guardarPaciente","_callee4","newPaciente","_context4","body","JSON","stringify","array","push","PageFormularioPaciente","Props","paciente","isNuevo","nombre","apellido_p","apellido_m","edad","sexo","telefono","email","direccion","pa","guardarPa","_ref","Object","asyncToGenerator","PageFormularioPaciente_regeneratorRuntime","mark","_callee","_context","actualizarLista","apply","this","arguments","Modal","show","onHide","handleClose","backdrop","keyboard","Header","onAuxClick","alert","closeButton","Title","Body","person_fill","pattern","placeholder","maxLength","onChange","e","String","target","value","htmlFor","Number","telephone_outbound_fill","envelope_fill","Footer","Button","variant","onClick","length","s","indexOf","b","validarDatos","TablaPaciente","eliminarPaciente","TablaPaciente_regeneratorRuntime","p","_x","pacientes","hastPaciente","hastNuevo","handleShow","pencil","size","title","text","dangerMode","_ref3","willDelete","_x2","trash3","LISTA_C","Obc","PagePacientes","_useState","useState","_useState2","slicedToArray","setPaciente","_useState3","_useState4","listaPacientes","setListaPacientes","_useState5","_useState6","setShow","_useState7","_useState8","getIsNuevo","setIsNuevo","buscarLista","_ref2","PagePacientes_regeneratorRuntime","React","useEffect","location","Mostrar","n","pacientes_TablaPaciente","OpcionesMostrar","Fragment","replace","listaAux","forEach","pass","join","buscarPacientesPorN","pacientes_PageFormularioPaciente","buscarMedicos","ApiMedico_regeneratorRuntime","removerMedico","guardarMedico","newMedico","PageFormularioMedico","medico","especialidad","me","PageFormularioMedico_regeneratorRuntime","TablaMedico","eliminarMedico","TablaMedico_regeneratorRuntime","medicos","hastMedico","PageMedicos","setMedico","listaMedicos","setListaMedicos","PageMedicos_regeneratorRuntime","medicos_TablaMedico","buscarMedicosPorN","medicos_PageFormularioMedico","buscarHabitaciones","ApiHabitaciones_regeneratorRuntime","removerHabitacion","guardarHabitacion","newHabitacion","PageFormularioHabitacion","habitacion","ocupado","piso","hab","PageFormularioHabitacion_regeneratorRuntime","TablaHabitacion","eliminarHabitacion","TablaHabitacion_regeneratorRuntime","habitaciones","hastHabitacion","PageHabitaciones","setHabitacion","listaHabitaciones","setListaHabitaciones","PageHabitaciones_regeneratorRuntime","habitaciones_TablaHabitacion","buscarHabitacionesPorN","habitaciones_PageFormularioHabitacion","buscarCitas","citas","ApiCitas_regeneratorRuntime","removerCita","guardarCita","newCita","buscarCitaPacientePorId","_callee5","Paciente","_context5","buscarListaDePacientes","_callee6","_context6","buscarCitaMedicoPorId","_callee7","Medico","_context7","buscarListaDeMedicos","_callee8","_context8","buscarCitaHabitacionPorId","_callee9","Habitacion","_context9","buscarListaDeHabitaciones","_callee10","_context10","cita","PageFormularioCita","getFechaSelect","setFechaSelect","getHoraSelect","setHoraSelect","idmedico","idpaciente","idhabitacion","fecha","hora","ci","guardarCi","PageFormularioCita_regeneratorRuntime","listaNombres","ListaMedicos","m","ListaHabitaciones","h","DatePicker","newDate","TimePicker","console","log","toLocaleTimeString","d","getDate","getMonth","getFullYear","TablaCita","eliminarCita","TablaCita_regeneratorRuntime","c","disabled","hastCita","PageCitas","setCita","listaCitas","setListaCitas","setListaNombres","_useState9","_useState10","PageCitas_regeneratorRuntime","obtenerListaDeNombresPorId","obtenerListaNombres","ListasAuxCompletas","ListaPacientes","setTimeout","_ref5","_ref6","citas_TablaCita","cadena","buscarCitasPorN","citas_PageFormularioCita","PageRutas","react_router_dist","path","element","citas_PageCitas","pacientes_PagePacientes","medicos_PageMedicos","habitaciones_PageHabitaciones","App","components_PageBarraPrincipal","components_PageRutas","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","useUtils_cfb96ac9","locale","esLocale","utils","DateFnsUtils","src_App","module","exports"],"mappings":"kQAYMA,EAAyB,CAC7B,CACEC,OAAQ,SACRC,IAAK,IAEP,CACED,OAAQ,QACRC,IAAK,SAEP,CACED,OAAQ,YACRC,IAAK,aAEP,CACED,OAAQ,UACRC,IAAK,WAEP,CACED,OAAQ,eACRC,IAAK,iBAwEMC,EAnEY,WAEzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,+BAC3BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+DACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,6BACAH,EAAAC,EAAAC,cAAA,OACEG,IAAI,MACJC,MAAM,KACNH,UAAU,8BACVI,IAAKC,MAEPR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,gBAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVM,KAAK,SACLC,iBAAe,WACfC,iBAAe,+BACfC,gBAAc,8BACdC,gBAAc,QACdC,aAAW,qBAEXd,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGjBP,EAAUmB,IAAI,SAACC,EAAMC,GACpB,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAGd,UAAU,4BACpBH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEhB,UAAU,WACViB,GAAE,IAAAC,OAAML,EAAKlB,KACbwB,MAAO,CAAEC,MAAO,UAEfP,EAAKlB,QAMdE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0EAGdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACb,IADH,gBAEgB,IACdH,EAAAC,EAAAC,cAAA,OACEG,IAAI,MACJC,MAAM,KACNkB,OAAO,KACPrB,UAAU,8BACVI,IAAKC,+2MC3FnB,IAAMiB,EAAM,sCAwBGC,8EAAf,SAAAC,IAAA,IAAA7B,EAAA8B,EAAA,OAAAC,IAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGUlC,EAAM2B,EAAM,YAHtBM,EAAAE,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVG,EAAAO,KAAAP,EAAAE,KAAA,EAciBL,EAAMW,OAdvB,cAAAR,EAAAS,OAAA,SAAAT,EAAAO,MAAA,eAAAP,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAAAA,EAAAS,OAAA,cAgBWE,GAhBX,yBAAAX,EAAAY,SAAAhB,EAAA,kDAqBeiB,+EAAf,SAAAC,EAA+BzC,GAA/B,IAAAN,EAAA,OAAA+B,IAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAEQnC,EAAM2B,EAAM,qBAAuBrB,EAF3C0C,EAAAb,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,SACRC,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,qCAAyD,CAC3DE,KAAM,UAKVD,IAAK,+CAA6C,CAChDC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA1Bd,wBAAAL,EAAAH,SAAAE,sCAgCeS,+EAAf,SAAAC,EAA+BC,GAA/B,IAAA1D,EAAA,OAAA+B,IAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEQnC,EAAM2B,EAAM,mBAFpBgC,EAAAxB,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,OACRuB,KAAMC,KAAKC,UAAUJ,GACrBpB,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,oCAAwD,CAC1DE,KAAM,UAKVD,IAAK,8CAA4C,CAC/CC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA3Bd,wBAAAM,EAAAd,SAAAY,8yMCzDA,IADA,IAAIM,EAAkB,GACb5C,EAAI,EAAGA,EAAI,IAAKA,IACvB4C,EAAMC,KAAK7C,GAIb,IA8Oe8C,EA9OqC,SAACC,GAEnD,IAAIC,EAAqBD,EAAME,QAC3B,CACE9D,GAAI,GACJ+D,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZC,KAAM,EACNC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,UAAW,IAEbV,EAAMW,GAyDJC,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,IAAAC,KAAG,SAAAC,IAAA,OAAAF,IAAAlD,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAEhBgC,EAAS7D,GAAK4D,EAAME,QAAU,GAAKD,EAAS7D,GAF5B+E,EAAAlD,KAAA,EAIVqB,EAAgBW,GAJN,OAMhBD,EAAMoB,kBANU,wBAAAD,EAAAxC,SAAAuC,MAAH,yBAAAL,EAAAQ,MAAAC,KAAAC,YAAA,GAUf,OAEEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CACEC,KAAMzB,EAAMyB,KACZC,OAAQ1B,EAAM2B,YACdC,SAAS,SACTC,UAAU,GAGV7F,EAAAC,EAAAC,cAACsF,EAAA,EAAMM,OAAP,CACEC,WAAY,WACVC,MAAM,UAERC,aAAW,GAGXjG,EAAAC,EAAAC,cAACsF,EAAA,EAAMU,MAAP,KACGlC,EAAME,QAAU,mBAAqB,UADxC,cAMFlE,EAAAC,EAAAC,cAACsF,EAAA,EAAMW,KAAP,KAEEnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACkG,EAAA,EAAD,OAGFpG,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL4F,QAAQ,mCACRvF,aAAW,SACXwF,YAAatC,EAAME,QAAU,SAAWD,EAASE,OACjDhE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQxC,EAASE,OAASuC,OAAOD,EAAEE,OAAOC,UAGtD5G,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLK,aAAW,aACXwF,YAAatC,EAAME,QAAU,aAAeD,EAASG,WACrDjE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQxC,EAASG,WAAasC,OAAOD,EAAEE,OAAOC,UAG1D5G,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLK,aAAW,aACXwF,YAAatC,EAAME,QAAU,aAAeD,EAASI,WACrDlE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQxC,EAASI,WAAaqC,OAAOD,EAAEE,OAAOC,WAK5D5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,QAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQxC,EAASM,KAAOmC,OAAOD,EAAEE,OAAOC,QAClDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAKD,EAASM,MACvCvE,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,UACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,SACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,QACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,MAAd,wBAGF5G,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,QAGA7G,EAAAC,EAAAC,cAAA,UAEEsG,SAAU,SAACC,GAAD,OAAQxC,EAASK,KAAOwC,OAAOL,EAAEE,OAAOC,QAClDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAKD,EAASK,MACtCT,EAAM9C,IAAI,SAACE,GACV,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,IAAKD,EAAG2F,MAAO3F,GACpBA,OAQXjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,OAEF/G,EAAAC,EAAAC,cAAA,SACEO,KAAK,SACLN,UAAU,eACVmG,YAAatC,EAAME,QAAU,WAAaD,EAASO,SACnD1D,aAAW,WACXyF,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQxC,EAASO,SAAWkC,OAAOD,EAAEE,OAAOC,UAGxD5G,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,OAEFhH,EAAAC,EAAAC,cAAA,SACEO,KAAK,QACLN,UAAU,eACVmG,YAAatC,EAAME,QAAU,QAAUD,EAASQ,MAChD3D,aAAW,QACXyF,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQxC,EAASQ,MAAQiC,OAAOD,EAAEE,OAAOC,WAKvD5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,gBACAH,EAAAC,EAAAC,cAAA,YACEsG,SAAU,SAACC,GAAD,OAAQxC,EAASS,UAAYgC,OAAOD,EAAEE,OAAOC,QACvDzG,UAAU,eACVW,aAAW,gBACXwF,YAAatC,EAAME,QAAU,GAAKD,EAASS,UAC3C6B,UAAW,QAMjBvG,EAAAC,EAAAC,cAACsF,EAAA,EAAMyB,OAAP,KAEEjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPpD,EAAM2B,gBAHV,SASA3F,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBArNpB,WAEnB,GAAiC,KAA7BnD,EAASO,SAAS6C,OAMtB,GAAIpD,EAASK,KAAO,GAAKL,EAASK,KAAO,IACvCpB,IAAK,SAAU,kBAAmB,aADpC,CAMA,IAAMoE,EAAIrD,EAASM,KACnB,GAAU,MAAN+C,GAAmB,MAANA,GAAmB,MAANA,GAAmB,OAANA,EAM3C,IACwC,IAAtCrD,EAASG,WAAWmD,QAAQ,OACU,IAAtCtD,EAASI,WAAWkD,QAAQ,MAC5BtD,EAASG,WAAWiD,OAAS,GAC7BpD,EAASI,WAAWgD,OAAS,EAE7BnE,IAAK,SAAU,sBAAuB,cAKxC,GAAIe,EAASE,OAAOkD,OAAS,EAC3BnE,IAAK,SAAU,gCAAiC,aADlD,CAMA,GAAuB,KAAnBe,EAASQ,MAAc,CACzB,IAAMxE,EAAIgE,EAASQ,MAAM8C,QAAQ,KAC3BC,EAAIvD,EAASQ,MAAM8C,QAAQ,KAEjC,IAAW,IAAPtH,IAAmB,IAAPuH,GAAYvD,EAASQ,MAAM4C,OAAS,EAElD,YADAnE,IAAK,SAAU,mBAAoB,SAMvC0B,IACAZ,EAAM2B,mBAlCJzC,IAAK,SAAU,kBAAmB,cAblCA,IAAK,SAAU,2CAAyC,SAkNbuE,KAAzC,uzMClPR,IAiGeC,EAjG6B,SAAC1D,GAE3C,IAAM2D,EAAgB,eAAA9C,EAAAC,OAAAC,EAAA,EAAAD,CAAA8C,IAAA3C,KAAG,SAAAC,EAAO2C,GAAP,OAAAD,IAAA9F,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEjBW,EAAgBiF,EAAEzH,IAFD,OAKvB4D,EAAMoB,kBALiB,wBAAAD,EAAAxC,SAAAuC,MAAH,gBAAA4C,GAAA,OAAAjD,EAAAQ,MAAAC,KAAAC,YAAA,GAStB,OACEvF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mDAEfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wBAIJF,EAAAC,EAAAC,cAAA,aACG8D,EAAM+D,UAAUhH,IAAI,SAAC8G,EAAG5G,GACvB,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAI,GAEXjB,EAAAC,EAAAC,cAAA,UAAKe,EAAI,GAETjB,EAAAC,EAAAC,cAAA,UAAK2H,EAAE1D,QAEPnE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEzD,YAEPpE,EAAAC,EAAAC,cAAA,UAAK2H,EAAExD,YAEPrE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEtD,MAEPvE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEvD,MAEPtE,EAAAC,EAAAC,cAAA,UAAK2H,EAAErD,UAEPxE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEpD,OAEPzE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEnD,WAEP1E,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAS,WACPpD,EAAMgE,aAAaH,GACnB7D,EAAMiE,YACNjE,EAAMkE,eAGRlI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAQC,KAAM,MAGhBpI,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAOtC,OAAAC,EAAA,EAAAD,CAAA8C,IAAA3C,KAAE,SAAApC,IAAA,OAAA+E,IAAA9F,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACPiB,IAAK,CACHmF,MAAK,cACLC,KAAI,iBAAAjH,OAAmBwG,EAAE1D,OAArB,6BACJhB,KAAM,UAENoF,YAAY,IACXxF,KANH,eAAAyF,EAAA1D,OAAAC,EAAA,EAAAD,CAAA8C,IAAA3C,KAMQ,SAAAtD,EAAO8G,GAAP,OAAAb,IAAA9F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEFwG,EAFE,CAAA1G,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAIE0F,EAAiBE,GAJnB,wBAAA9F,EAAAY,SAAAhB,MANR,gBAAA+G,GAAA,OAAAF,EAAAnD,MAAAC,KAAAC,YAAA,IADO,wBAAAzC,EAAAH,SAAAE,OAgBT7C,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAQP,KAAM,8xMCzFhC,IAGIQ,EAHAC,EAAM,EAgLKC,EA1K2B,SAAAjE,GAAgB,IAAbhF,EAAagF,EAAbhF,OAAakJ,EAExBC,mBAAmB,CACjD5I,GAAI,GACJ+D,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZE,KAAM,GACND,KAAM,EACNE,SAAU,GACVC,MAAO,GACPC,UAAW,KAX2CuE,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAEjD9E,EAFiDgF,EAAA,GAEvCE,EAFuCF,EAAA,GAalDjB,EAAe,SAACH,GAAD,OAAuBsB,EAAYtB,IAbAuB,EAgBZJ,mBAAqB,IAhBTK,EAAAvE,OAAAoE,EAAA,EAAApE,CAAAsE,EAAA,GAgBjDE,EAhBiDD,EAAA,GAgBjCE,EAhBiCF,EAAA,GAAAG,EAmBhCR,oBAAkB,GAnBcS,EAAA3E,OAAAoE,EAAA,EAAApE,CAAA0E,EAAA,GAmBjD/D,EAnBiDgE,EAAA,GAmB3CC,EAnB2CD,EAAA,GAqBlDvB,EAAa,kBAAYwB,GAAQ,IArBiBC,EAwBvBX,oBAAkB,GAxBKY,EAAA9E,OAAAoE,EAAA,EAAApE,CAAA6E,EAAA,GAwBjDE,EAxBiDD,EAAA,GAwBrCE,EAxBqCF,EAAA,GAyBlD3B,EAAY,kBAAY6B,GAAW,IAGnCC,EAAW,eAAAC,EAAAlF,OAAAC,EAAA,EAAAD,CAAAmF,IAAAhF,KAAG,SAAAC,IAAA,IAAAlC,EAAA,OAAAiH,IAAAnI,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEAP,IAFA,iBAKNgB,KAHNM,EAFYmC,EAAA7C,OAKe,OAARU,GAAgBA,EAAIC,OAAS,KALpC,CAAAkC,EAAAlD,KAAA,eAMhBsH,EAAkB,IAClBV,GAAO,EAPS1D,EAAA3C,OAAA,iBAYlBqG,EAAM,EACND,EAAU5F,EACVuG,EAAkBvG,GAdA,yBAAAmC,EAAAxC,SAAAuC,MAAH,yBAAA8E,EAAA3E,MAAAC,KAAAC,YAAA,GAgBXH,EAAkB,kBAAqB2E,KAsE7CG,IAAMC,UAAU,WACdJ,KACC,CAACK,WAGJ,IAAMC,EAtCkB,SAACC,EAAWzC,GAGlC,OAFAyC,GAAW,IAAPA,GAAyB,IAAbzC,EAAER,OAAe,EAAIiD,GAInC,KAAK,EACH,OACEtK,EAAAC,EAAAC,cAACqK,EAAD,CACExC,UAAWF,EACXK,WAAYA,EACZD,UAAWA,EACXD,aAAcA,EACd5C,gBAAiBA,IAIvB,KAAK,EACH,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,qCAIN,QACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,uDAYMsK,CAAgB3B,EAAKS,GAGrC,OACEtJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwK,SAAA,KACEzK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBAAwCN,GACxCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAEdH,EAAAC,EAAAC,cAAA,SACEqG,UAAW,GACXpG,UAAU,eACVM,KAAK,SACL6F,YAAY,SACZxF,aAAW,SACX0F,SAAU,SAACC,GAAD,OAzFI,SAACtC,GAK3B,GAAe,MAHfA,EAASA,EAAOuG,QAAQ,KAAM,KAGX,CAEjB,IAAIC,EAAuB,GAoB3B,OAjBA/B,EAAQgC,QAAQ,SAACC,GAEM,CAACA,EAAK1G,OAAQ0G,EAAKxG,WAAYwG,EAAKzG,YACtD0G,KAAK,IACLJ,QAAQ,KAAM,IAGInD,QAAQpD,IAGhB,GACXwG,EAAS7G,KAAK+G,UAKlBtB,EAAkBoB,GAIpBvF,IA2D6B2F,CAAoBrE,OAAOD,EAAEE,OAAOC,WAGvD5G,EAAAC,EAAAC,cAAA,UACEoB,MAAO,CAAEhB,MAAO,KAChBG,KAAK,SACLN,UAAU,uBACViH,QAAS,WACP0C,GAAW,GACX5B,MANJ,6BAcNlI,EAAAC,EAAAC,cAAA,WAECmK,GAIHrK,EAAAC,EAAAC,cAAC8K,EAAD,CACErG,GAAIV,EACJwB,KAAMA,EACNvB,QAAS2F,EACTlE,YA/Ic,kBAAY+D,GAAQ,IAgJlCtE,gBAAiBA,uxMCpLzB,IAAM3D,EAAM,sCAwBGwJ,8EAAf,SAAAtJ,IAAA,IAAA7B,EAAA8B,EAAA,OAAAsJ,IAAApJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGUlC,EAAM2B,EAAM,UAHtBM,EAAAE,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVG,EAAAO,KAAAP,EAAAE,KAAA,EAciBL,EAAMW,OAdvB,cAAAR,EAAAS,OAAA,SAAAT,EAAAO,MAAA,eAAAP,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAAAA,EAAAS,OAAA,cAgBWE,GAhBX,yBAAAX,EAAAY,SAAAhB,EAAA,kDAqBewJ,+EAAf,SAAAtI,EAA6BzC,GAA7B,IAAAN,EAAA,OAAAoL,IAAApJ,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAEQnC,EAAM2B,EAAM,mBAAqBrB,EAFzC0C,EAAAb,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,SACRC,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,qCAAyD,CAC3DE,KAAM,UAKVD,IAAK,+CAA6C,CAChDC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA1Bd,wBAAAL,EAAAH,SAAAE,sCAgCeuI,+EAAf,SAAA7H,EAA6B8H,GAA7B,IAAAvL,EAAA,OAAAoL,IAAApJ,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEQnC,EAAM2B,EAAM,iBAFpBgC,EAAAxB,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,OACRuB,KAAMC,KAAKC,UAAUyH,GACrBjJ,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,oCAAwD,CAC1DE,KAAM,UAKVD,IAAK,8CAA4C,CAC/CC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA3Bd,wBAAAM,EAAAd,SAAAY,8yMCzDA,IADA,IAAIM,EAAkB,GACb5C,EAAI,GAAIA,EAAI,GAAIA,IACvB4C,EAAMC,KAAK7C,GAIb,IAwOeqK,EAxOmC,SAACtH,GAEjD,IAAIuH,EAAiBvH,EAAME,QACvB,CACE9D,GAAI,GACJ+D,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZG,SAAU,GACVC,MAAO,GACP+G,aAAc,GACdlH,KAAM,GAERN,EAAMyH,GAwDJ7G,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAA4G,IAAAzG,KAAG,SAAAC,IAAA,OAAAwG,IAAA5J,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAEhBsJ,EAAOnL,GAAK4D,EAAME,QAAU,GAAKqH,EAAOnL,GAFxB+E,EAAAlD,KAAA,EAIVmJ,EAAcG,GAJJ,OAMhBvH,EAAMoB,kBANU,wBAAAD,EAAAxC,SAAAuC,MAAH,yBAAAL,EAAAQ,MAAAC,KAAAC,YAAA,GAUf,OAEEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CACEC,KAAMzB,EAAMyB,KACZC,OAAQ1B,EAAM2B,YACdC,SAAS,SACTC,UAAU,GAGV7F,EAAAC,EAAAC,cAACsF,EAAA,EAAMM,OAAP,CACEC,WAAY,WACVC,MAAM,UAERC,aAAW,GAGXjG,EAAAC,EAAAC,cAACsF,EAAA,EAAMU,MAAP,KACGlC,EAAME,QAAU,mBAAqB,UADxC,YAMFlE,EAAAC,EAAAC,cAACsF,EAAA,EAAMW,KAAP,KAEEnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACkG,EAAA,EAAD,OAGFpG,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL4F,QAAQ,mCACRvF,aAAW,SACXwF,YAAatC,EAAME,QAAU,SAAWqH,EAAOpH,OAC/ChE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQ8E,EAAOpH,OAASuC,OAAOD,EAAEE,OAAOC,UAGpD5G,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLK,aAAW,aACXwF,YAAatC,EAAME,QAAU,aAAeqH,EAAOnH,WACnDjE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQ8E,EAAOnH,WAAasC,OAAOD,EAAEE,OAAOC,UAGxD5G,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLK,aAAW,aACXwF,YAAatC,EAAME,QAAU,aAAeqH,EAAOlH,WACnDlE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQ8E,EAAOlH,WAAaqC,OAAOD,EAAEE,OAAOC,WAK1D5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,gBAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQ8E,EAAOC,aAAe9E,OAAOD,EAAEE,OAAOC,QACxDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAKqH,EAAOC,cACrCxL,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,WAAd,WACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,mBAAd,mBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,mBAAd,kBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,wBAAd,wBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,gBAAd,gBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,mBAAd,kBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,eAAd,eACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,aAAd,aACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,mBAAd,mBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,oBAAd,mBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,oBAAd,mBACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,SAAd,SAGF5G,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,QAGA7G,EAAAC,EAAAC,cAAA,UAEEsG,SAAU,SAACC,GAAD,OAAQ8E,EAAOjH,KAAOwC,OAAOL,EAAEE,OAAOC,QAChDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAKqH,EAAOjH,MACpCT,EAAM9C,IAAI,SAACE,GACV,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,IAAKD,EAAG2F,MAAO3F,GACpBA,OAQXjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,OAEF/G,EAAAC,EAAAC,cAAA,SACEO,KAAK,SACLN,UAAU,eACVmG,YAAatC,EAAME,QAAU,WAAaqH,EAAO/G,SACjD1D,aAAW,WACXyF,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQ8E,EAAO/G,SAAWkC,OAAOD,EAAEE,OAAOC,UAGtD5G,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,OAEFhH,EAAAC,EAAAC,cAAA,SACEO,KAAK,QACLN,UAAU,eACVmG,YAAatC,EAAME,QAAU,QAAUqH,EAAO9G,MAC9C3D,aAAW,QACXyF,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQ8E,EAAO9G,MAAQiC,OAAOD,EAAEE,OAAOC,YAMvD5G,EAAAC,EAAAC,cAACsF,EAAA,EAAMyB,OAAP,KAEEjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPpD,EAAM2B,gBAHV,SASA3F,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAhNpB,WAEnB,GAA+B,KAA3BmE,EAAO/G,SAAS6C,OAMpB,GAAIkE,EAAOjH,KAAO,IAAMiH,EAAOjH,KAAO,GACpCpB,IAAK,SAAU,kBAAmB,cAKpC,IACsC,IAApCqI,EAAOnH,WAAWmD,QAAQ,OACU,IAApCgE,EAAOlH,WAAWkD,QAAQ,MAC1BgE,EAAOnH,WAAWiD,OAAS,GAC3BkE,EAAOlH,WAAWgD,OAAS,EAE3BnE,IAAK,SAAU,sBAAuB,cAKxC,GAAIqI,EAAOpH,OAAOkD,OAAS,EACzBnE,IAAK,SAAU,gCAAiC,cAKlD,GAAIqI,EAAOC,aAAanE,OAAS,EAC/BnE,IAAK,SAAU,sCAAuC,aADxD,CAMA,GAAIqI,EAAO9G,MAAM4C,OAAS,EAAG,CAC3B,IAAMpH,EAAIsL,EAAO9G,MAAM8C,QAAQ,KACzBC,EAAI+D,EAAO9G,MAAM8C,QAAQ,KAE/B,IAAW,IAAPtH,IAAmB,IAAPuH,GAAY+D,EAAO9G,MAAM4C,OAAS,EAEhD,YADAnE,IAAK,SAAU,mBAAoB,SAMvC0B,IACAZ,EAAM2B,mBA9CJzC,IAAK,SAAU,2CAAyC,SA6MbuE,KAAzC,uyMC5OR,IA8FekE,GA9F2B,SAAC3H,GAEzC,IAAM4H,EAAc,eAAA/G,EAAAC,OAAAC,EAAA,EAAAD,CAAA+G,KAAA5G,KAAG,SAAAC,EAAO2C,GAAP,OAAAgE,KAAA/J,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEfkJ,EAActD,EAAEzH,IAFD,OAKrB4D,EAAMoB,kBALe,wBAAAD,EAAAxC,SAAAuC,MAAH,gBAAA4C,GAAA,OAAAjD,EAAAQ,MAAAC,KAAAC,YAAA,GASpB,OACEvF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mDAEfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBAIJF,EAAAC,EAAAC,cAAA,aACG8D,EAAM8H,QAAQ/K,IAAI,SAAC8G,EAAG5G,GACrB,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAE,GAETjB,EAAAC,EAAAC,cAAA,UAAKe,EAAE,GAEPjB,EAAAC,EAAAC,cAAA,UAAK2H,EAAE1D,QAEPnE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEzD,YAEPpE,EAAAC,EAAAC,cAAA,UAAK2H,EAAExD,YAEPrE,EAAAC,EAAAC,cAAA,UAAK2H,EAAErD,UAEPxE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEpD,OAEPzE,EAAAC,EAAAC,cAAA,UAAK2H,EAAE2D,cAEPxL,EAAAC,EAAAC,cAAA,UAAK2H,EAAEvD,MAEPtE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAS,WACPpD,EAAM+H,WAAWlE,GACjB7D,EAAMiE,YACNjE,EAAMkE,eAGRlI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAQC,KAAM,MAGhBpI,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAOtC,OAAAC,EAAA,EAAAD,CAAA+G,KAAA5G,KAAE,SAAApC,IAAA,OAAAgJ,KAAA/J,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACPiB,IAAK,CACHmF,MAAK,cACLC,KAAI,iBAAAjH,OAAmBwG,EAAE1D,OAArB,6BACJhB,KAAM,UAENoF,YAAY,IACXxF,KANH,eAAAyF,EAAA1D,OAAAC,EAAA,EAAAD,CAAA+G,KAAA5G,KAMQ,SAAAtD,EAAO8G,GAAP,OAAAoD,KAAA/J,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEFwG,EAFE,CAAA1G,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAIE2J,EAAe/D,GAJjB,wBAAA9F,EAAAY,SAAAhB,MANR,gBAAA+G,GAAA,OAAAF,EAAAnD,MAAAC,KAAAC,YAAA,IADO,wBAAAzC,EAAAH,SAAAE,OAgBT7C,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAQP,KAAM,gyMCtFhC,IAGIQ,GAHAC,GAAM,EA+KKmD,GAzKyB,SAAAnH,GAAgB,IAAbhF,EAAagF,EAAbhF,OAAakJ,EAE1BC,mBAAiB,CAC3C5I,GAAI,GACJ+D,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZG,SAAU,GACVC,MAAO,GACP+G,aAAc,GACdlH,KAAM,IAV8C2E,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAE/CwC,EAF+CtC,EAAA,GAEvCgD,EAFuChD,EAAA,GAYhD8C,EAAa,SAAClE,GAAD,OAAqBoE,EAAUpE,IAZIuB,EAedJ,mBAAmB,IAfLK,EAAAvE,OAAAoE,EAAA,EAAApE,CAAAsE,EAAA,GAe/C8C,EAf+C7C,EAAA,GAejC8C,EAfiC9C,EAAA,GAAAG,EAkB9BR,oBAAkB,GAlBYS,EAAA3E,OAAAoE,EAAA,EAAApE,CAAA0E,EAAA,GAkB/C/D,EAlB+CgE,EAAA,GAkBzCC,EAlByCD,EAAA,GAoBhDvB,EAAa,kBAAYwB,GAAQ,IApBeC,EAuBrBX,oBAAkB,GAvBGY,EAAA9E,OAAAoE,EAAA,EAAApE,CAAA6E,EAAA,GAuB/CE,EAvB+CD,EAAA,GAuBnCE,EAvBmCF,EAAA,GAwBhD3B,EAAY,kBAAY6B,GAAW,IAGnCC,EAAW,eAAAC,EAAAlF,OAAAC,EAAA,EAAAD,CAAAsH,KAAAnH,KAAG,SAAAC,IAAA,IAAAlC,EAAA,OAAAoJ,KAAAtK,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEAgJ,IAFA,iBAKNvI,KAHNM,EAFYmC,EAAA7C,OAKe,OAARU,GAAgBA,EAAIC,OAAS,KALpC,CAAAkC,EAAAlD,KAAA,eAMhBkK,EAAgB,IAChBtD,IAAO,EAPS1D,EAAA3C,OAAA,iBAYlBqG,GAAM,EACND,GAAU5F,EACVmJ,EAAgBnJ,GAdE,yBAAAmC,EAAAxC,SAAAuC,MAAH,yBAAA8E,EAAA3E,MAAAC,KAAAC,YAAA,GAgBXH,EAAkB,kBAAqB2E,KAsE7CG,IAAMC,UAAU,WACdJ,KACC,CAACK,WAGJ,IAAMC,EAtCkB,SAACC,EAAWzC,GAGlC,OAFAyC,GAAW,IAAPA,GAAyB,IAAbzC,EAAER,OAAe,EAAIiD,GAInC,KAAK,EACH,OACEtK,EAAAC,EAAAC,cAACmM,GAAD,CACEP,QAASjE,EACTK,WAAYA,EACZD,UAAWA,EACX8D,WAAYA,EACZ3G,gBAAiBA,IAIvB,KAAK,EACH,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,qCAIN,QACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,uDAYMsK,CAAgB3B,GAAKqD,GAGrC,OACElM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwK,SAAA,KACEzK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBAAwCN,GACxCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAEdH,EAAAC,EAAAC,cAAA,SACEqG,UAAW,GACXpG,UAAU,eACVM,KAAK,SACL6F,YAAY,SACZxF,aAAW,SACX0F,SAAU,SAACC,GAAD,OAzFE,SAACtC,GAKzB,GAAe,MAHfA,EAASA,EAAOuG,QAAQ,KAAM,KAGX,CAEjB,IAAIC,EAAqB,GAoBzB,OAjBA/B,GAAQgC,QAAQ,SAACC,GAEM,CAACA,EAAK1G,OAAQ0G,EAAKxG,WAAYwG,EAAKzG,YACtD0G,KAAK,IACLJ,QAAQ,KAAM,IAGInD,QAAQpD,IAGhB,GACXwG,EAAS7G,KAAK+G,UAKlBsB,EAAgBxB,GAIlBvF,IA2D6BkH,CAAkB5F,OAAOD,EAAEE,OAAOC,WAGrD5G,EAAAC,EAAAC,cAAA,UACEoB,MAAO,CAAEhB,MAAO,KAChBG,KAAK,SACLN,UAAU,uBACViH,QAAS,WACP0C,GAAW,GACX5B,MANJ,2BAcNlI,EAAAC,EAAAC,cAAA,WAECmK,GAIHrK,EAAAC,EAAAC,cAACqM,EAAD,CACEd,GAAIF,EACJ9F,KAAMA,EACNvB,QAAS2F,EACTlE,YA/Ic,kBAAY+D,GAAQ,IAgJlCtE,gBAAiBA,yxMCnLzB,IAAM3D,GAAM,sCAwBG+K,mFAAf,SAAA7K,IAAA,IAAA7B,EAAA8B,EAAA,OAAA6K,KAAA3K,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGUlC,EAAM2B,GAAM,eAHtBM,EAAAE,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVG,EAAAO,KAAAP,EAAAE,KAAA,EAciBL,EAAMW,OAdvB,cAAAR,EAAAS,OAAA,SAAAT,EAAAO,MAAA,eAAAP,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAAAA,EAAAS,OAAA,cAgBWE,GAhBX,yBAAAX,EAAAY,SAAAhB,EAAA,kDAqBe+K,oFAAf,SAAA7J,EAAiCzC,GAAjC,IAAAN,EAAA,OAAA2M,KAAA3K,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAEQnC,EAAM2B,GAAM,uBAAyBrB,EAF7C0C,EAAAb,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,SACRC,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,qCAAyD,CAC3DE,KAAM,UAKVD,IAAK,+CAA6C,CAChDC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA1Bd,wBAAAL,EAAAH,SAAAE,sCAgCe8J,oFAAf,SAAApJ,EAAiCqJ,GAAjC,IAAA9M,EAAA,OAAA2M,KAAA3K,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEQnC,EAAM2B,GAAM,qBAFpBgC,EAAAxB,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,OACRuB,KAAMC,KAAKC,UAAUgJ,GACrBxK,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,oCAAwD,CAC1DE,KAAM,UAKVD,IAAK,8CAA4C,CAC/CC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA3Bd,wBAAAM,EAAAd,SAAAY,gzMCzDA,IADA,IAAIM,GAAkB,GACb5C,GAAI,EAAGA,GAAI,IAAKA,KACvB4C,GAAMC,KAAK7C,IAIb,IA6Ie4L,GA7IuC,SAAC7I,GAErD,IAAI8I,EAAyB9I,EAAME,QAC/B,CACE9D,GAAI,GACJ+D,OAAQ,GACR4I,SAAU,EACVC,KAAM,GAERhJ,EAAMiJ,IA6BJrI,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAoI,KAAAjI,KAAG,SAAAC,IAAA,OAAAgI,KAAApL,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAEhB6K,EAAW1M,GAAK4D,EAAME,QAAU,GAAK4I,EAAW1M,GAFhC+E,EAAAlD,KAAA,EAIV0K,GAAkBG,GAJR,OAMhB9I,EAAMoB,kBANU,wBAAAD,EAAAxC,SAAAuC,MAAH,yBAAAL,EAAAQ,MAAAC,KAAAC,YAAA,GAUf,OAEEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CACEC,KAAMzB,EAAMyB,KACZC,OAAQ1B,EAAM2B,YACdC,SAAS,SACTC,UAAU,GAGV7F,EAAAC,EAAAC,cAACsF,EAAA,EAAMM,OAAP,CACEC,WAAY,WACVC,MAAM,UAERC,aAAW,GAGXjG,EAAAC,EAAAC,cAACsF,EAAA,EAAMU,MAAP,KACGlC,EAAME,QAAU,mBAAqB,UADxC,gBAMFlE,EAAAC,EAAAC,cAACsF,EAAA,EAAMW,KAAP,KAEEnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACkG,EAAA,EAAD,OAGFpG,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL4F,QAAQ,mCACRvF,aAAW,SACXwF,YAAatC,EAAME,QAAU,SAAW4I,EAAW3I,OACnDhE,UAAU,eACVoG,UAAW,GACXC,SAAU,SAACC,GAAD,OAAQqG,EAAW3I,OAASuC,OAAOD,EAAEE,OAAOC,WAK1D5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,QAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQqG,EAAWE,KAAOlG,OAAOL,EAAEE,OAAOC,QACpDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAK4I,EAAWE,MACzChN,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,UACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,UACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,UACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,WAGF5G,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,WAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQqG,EAAWC,QAAUjG,OAAOL,EAAEE,OAAOC,QACvDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cAAS8D,EAAME,QAAU,GAAK4I,EAAWC,SACzC/M,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,MACA5G,EAAAC,EAAAC,cAAA,UAAQ0G,MAAM,KAAd,SAMN5G,EAAAC,EAAAC,cAACsF,EAAA,EAAMyB,OAAP,KAEEjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPpD,EAAM2B,gBAHV,SASA3F,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAzHpB,WAEnB,GAAI0F,EAAWE,KAAO,GAAKF,EAAWE,KAAO,EAC3C9J,IAAK,SAAU,kBAAmB,aADpC,CAMA,IAAMoE,EAAIwF,EAAWC,QACX,IAANzF,GAAiB,IAANA,EAMXwF,EAAW3I,OAAOkD,OAAS,EAC7BnE,IAAK,SAAU,gCAAiC,UAKlD0B,IACAZ,EAAM2B,eAZJzC,IAAK,SAAU,gBAAiB,UA+GWuE,KAAzC,uyMCjJR,IAkFe0F,GAlF+B,SAACnJ,GAE7C,IAAMoJ,EAAkB,eAAAvI,EAAAC,OAAAC,EAAA,EAAAD,CAAAuI,KAAApI,KAAG,SAAAC,EAAO2C,GAAP,OAAAwF,KAAAvL,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEnByK,GAAkB7E,EAAEzH,IAFD,OAKzB4D,EAAMoB,kBALmB,wBAAAD,EAAAxC,SAAAuC,MAAH,gBAAA4C,GAAA,OAAAjD,EAAAQ,MAAAC,KAAAC,YAAA,GASxB,OACEvF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mDAEfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBAIJF,EAAAC,EAAAC,cAAA,aACG8D,EAAMsJ,aAAavM,IAAI,SAAC8G,EAAG5G,GAC1B,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAI,GAEXjB,EAAAC,EAAAC,cAAA,UAAKe,EAAI,GAETjB,EAAAC,EAAAC,cAAA,UAAK2H,EAAE1D,QAEPnE,EAAAC,EAAAC,cAAA,UAAK2H,EAAEmF,MAEPhN,EAAAC,EAAAC,cAAA,UAAmB,IAAd2H,EAAEkF,QAAgB,KAAO,MAE9B/M,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAS,WACPpD,EAAMuJ,eAAe1F,GACrB7D,EAAMiE,YACNjE,EAAMkE,eAGRlI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAQC,KAAM,MAGhBpI,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVW,aAAW,aACXsG,QAAOtC,OAAAC,EAAA,EAAAD,CAAAuI,KAAApI,KAAE,SAAApC,IAAA,OAAAwK,KAAAvL,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACPiB,IAAK,CACHmF,MAAK,cACLC,KAAI,iBAAAjH,OAAmBwG,EAAE1D,OAArB,6BACJhB,KAAM,UAENoF,YAAY,IACXxF,KANH,eAAAyF,EAAA1D,OAAAC,EAAA,EAAAD,CAAAuI,KAAApI,KAMQ,SAAAtD,EAAO8G,GAAP,OAAA4E,KAAAvL,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEFwG,EAFE,CAAA1G,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAIEmL,EAAmBvF,GAJrB,wBAAA9F,EAAAY,SAAAhB,MANR,gBAAA+G,GAAA,OAAAF,EAAAnD,MAAAC,KAAAC,YAAA,IADO,wBAAAzC,EAAAH,SAAAE,OAgBT7C,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAQP,KAAM,gyMC1EhC,IAGIQ,GAHAC,GAAM,EA2KK2E,GArK8B,SAAA3I,GAAgB,IAAbhF,EAAagF,EAAbhF,OAAakJ,EAEvBC,mBAAqB,CACvD5I,GAAI,GACJ+D,OAAQ,GACR6I,KAAM,EACND,QAAS,IANgD9D,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAEpD+D,EAFoD7D,EAAA,GAExCwE,EAFwCxE,EAAA,GAQrDsE,EAAiB,SAAC1F,GAAD,OAAyB4F,EAAc5F,IARHuB,EAWTJ,mBAAuB,IAXdK,EAAAvE,OAAAoE,EAAA,EAAApE,CAAAsE,EAAA,GAWpDsE,EAXoDrE,EAAA,GAWjCsE,EAXiCtE,EAAA,GAAAG,EAcnCR,oBAAkB,GAdiBS,EAAA3E,OAAAoE,EAAA,EAAApE,CAAA0E,EAAA,GAcpD/D,EAdoDgE,EAAA,GAc9CC,EAd8CD,EAAA,GAgBrDvB,EAAa,kBAAYwB,GAAQ,IAhBoBC,EAmB1BX,oBAAkB,GAnBQY,EAAA9E,OAAAoE,EAAA,EAAApE,CAAA6E,EAAA,GAmBpDE,EAnBoDD,EAAA,GAmBxCE,EAnBwCF,EAAA,GAoBrD3B,EAAY,kBAAY6B,GAAW,IAGnCC,EAAW,eAAAC,EAAAlF,OAAAC,EAAA,EAAAD,CAAA8I,KAAA3I,KAAG,SAAAC,IAAA,IAAAlC,EAAA,OAAA4K,KAAA9L,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEAuK,KAFA,iBAKN9J,KAHNM,EAFYmC,EAAA7C,OAKe,OAARU,GAAgBA,EAAIC,OAAS,KALpC,CAAAkC,EAAAlD,KAAA,eAMhB0L,EAAqB,IACrB9E,IAAO,EAPS1D,EAAA3C,OAAA,iBAYlBqG,GAAM,EACND,GAAU5F,EACV2K,EAAqB3K,GAdH,yBAAAmC,EAAAxC,SAAAuC,MAAH,yBAAA8E,EAAA3E,MAAAC,KAAAC,YAAA,GAgBXH,EAAkB,kBAAqB2E,KAsE7CG,IAAMC,UAAU,WACdJ,KACC,CAACK,WAGJ,IAAMC,EAtCkB,SAACC,EAAWzC,GAGlC,OAFAyC,GAAW,IAAPA,GAAyB,IAAbzC,EAAER,OAAe,EAAIiD,GAInC,KAAK,EACH,OACEtK,EAAAC,EAAAC,cAAC2N,GAAD,CACEP,aAAczF,EACdK,WAAYA,EACZD,UAAWA,EACXsF,eAAgBA,EAChBnI,gBAAiBA,IAIvB,KAAK,EACH,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,qCAIN,QACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,uDAYMsK,CAAgB3B,GAAK6E,GAGrC,OACE1N,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwK,SAAA,KACEzK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBAAwCN,GACxCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAEdH,EAAAC,EAAAC,cAAA,SACEqG,UAAW,GACXpG,UAAU,eACVM,KAAK,SACL6F,YAAY,SACZxF,aAAW,SACX0F,SAAU,SAACC,GAAD,OAzFO,SAACtC,GAK9B,GAAe,MAHfA,EAASA,EAAOuG,QAAQ,KAAM,KAGX,CAEjB,IAAIC,EAAyB,GAoB7B,OAjBA/B,GAAQgC,QAAQ,SAACC,GAEM,CAACA,EAAK1G,OAAQ0G,EAAKmC,MACrClC,KAAK,IACLJ,QAAQ,KAAM,IAGInD,QAAQpD,IAGhB,GACXwG,EAAS7G,KAAK+G,UAKlB8C,EAAqBhD,GAIvBvF,IA2D6B0I,CAAuBpH,OAAOD,EAAEE,OAAOC,WAG1D5G,EAAAC,EAAAC,cAAA,UACEoB,MAAO,CAAEhB,MAAO,KAChBG,KAAK,SACLN,UAAU,uBACViH,QAAS,WACP0C,GAAW,GACX5B,MANJ,+BAcNlI,EAAAC,EAAAC,cAAA,WAECmK,GAIHrK,EAAAC,EAAAC,cAAC6N,GAAD,CACEd,IAAKH,EACLrH,KAAMA,EACNvB,QAAS2F,EACTlE,YA/Ic,kBAAY+D,GAAQ,IAgJlCtE,gBAAiBA,6yMC/KzB,IAAM3D,GAAM,sCAwBGuM,mFAAf,SAAArM,IAAA,IAAA7B,EAAA8B,EAAAqM,EAAA,OAAAC,KAAApM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGUlC,EAAM2B,GAAM,QAHtBM,EAAAE,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVG,EAAAO,KAAAP,EAAAE,KAAA,EAcgCL,EAAMW,OAdtC,UAcU0L,EAdVlM,EAAAO,OAiBQV,EAAMqB,OAAS,KAjBvB,CAAAlB,EAAAE,KAAA,gBAAAF,EAAAS,OAAA,cAkBaE,GAlBb,eAAAX,EAAAS,OAAA,SAqBWyL,GArBX,eAAAlM,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAAAA,EAAAS,OAAA,cAuBWE,GAvBX,yBAAAX,EAAAY,SAAAhB,EAAA,kDA4BewM,oFAAf,SAAAtL,EAA2BzC,GAA3B,IAAAN,EAAA,OAAAoO,KAAApM,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAEQnC,EAAM2B,GAAM,iBAAmBrB,EAFvC0C,EAAAb,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,SACRC,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,qCAAyD,CAC3DE,KAAM,UAKVD,IAAK,+CAA6C,CAChDC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA1Bd,wBAAAL,EAAAH,SAAAE,sCAgCeuL,oFAAf,SAAA7K,EAA2B8K,GAA3B,IAAAvO,EAAA,OAAAoO,KAAApM,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAEQnC,EAAM2B,GAAM,eAFpBgC,EAAAxB,KAAA,EAKQC,MAAMpC,EAAK,CACfqC,OAAQ,OACRuB,KAAMC,KAAKC,UAAUyK,GACrBjM,QAAS,CACPC,eAAgB,sBAGjBU,KAAK,SAACC,GAEDA,EAAIC,OAAS,IACfC,IAAI,SAAA7B,OAAU2B,EAAIC,OAAd,oCAAwD,CAC1DE,KAAM,UAKVD,IAAK,8CAA4C,CAC/CC,KAAM,cAGTC,MAAM,SAACC,GACNH,IAAI,UAAA7B,OAAWgC,GAAO,CACpBF,KAAM,YA3Bd,wBAAAM,EAAAd,SAAAY,sCAiCe+K,oFAAf,SAAAC,EAAuCnO,GAAvC,IAAAN,EAAA0O,EAAA,OAAAN,KAAApM,KAAA,SAAA2M,GAAA,cAAAA,EAAAzM,KAAAyM,EAAAxM,MAAA,cAAAwM,EAAAzM,KAAA,EAGUlC,EAAM2B,GAAM,iBAAmBrB,EAHzCqO,EAAAxM,KAAA,EAM2BC,MAAMpC,EAAK,CAChCqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUmM,EANVC,EAAAnM,KAAAmM,EAAAxM,KAAA,EAciBuM,EAASjM,OAd1B,cAAAkM,EAAAjM,OAAA,SAAAiM,EAAAnM,MAAA,eAAAmM,EAAAzM,KAAA,GAAAyM,EAAAhM,GAAAgM,EAAA,SAAAA,EAAAjM,OAAA,cAgBWE,GAhBX,yBAAA+L,EAAA9L,SAAA4L,EAAA,kDAqBeG,mFAAf,SAAAC,IAAA,IAAA7O,EAAA8B,EAAA,OAAAsM,KAAApM,KAAA,SAAA8M,GAAA,cAAAA,EAAA5M,KAAA4M,EAAA3M,MAAA,cAAA2M,EAAA5M,KAAA,EAGUlC,EAAM2B,GAAM,kBAHtBmN,EAAA3M,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVgN,EAAAtM,KAAAsM,EAAA3M,KAAA,EAciBL,EAAMW,OAdvB,cAAAqM,EAAApM,OAAA,SAAAoM,EAAAtM,MAAA,eAAAsM,EAAA5M,KAAA,GAAA4M,EAAAnM,GAAAmM,EAAA,SAAAA,EAAApM,OAAA,cAgBWE,GAhBX,yBAAAkM,EAAAjM,SAAAgM,EAAA,kDAqBeE,oFAAf,SAAAC,EAAqC1O,GAArC,IAAAN,EAAAiP,EAAA,OAAAb,KAAApM,KAAA,SAAAkN,GAAA,cAAAA,EAAAhN,KAAAgN,EAAA/M,MAAA,cAAA+M,EAAAhN,KAAA,EAGUlC,EAAM2B,GAAM,eAAiBrB,EAHvC4O,EAAA/M,KAAA,EAMyBC,MAAMpC,EAAK,CAC9BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMU0M,EANVC,EAAA1M,KAAA0M,EAAA/M,KAAA,EAciB8M,EAAOxM,OAdxB,cAAAyM,EAAAxM,OAAA,SAAAwM,EAAA1M,MAAA,eAAA0M,EAAAhN,KAAA,GAAAgN,EAAAvM,GAAAuM,EAAA,SAAAA,EAAAxM,OAAA,cAgBWE,GAhBX,yBAAAsM,EAAArM,SAAAmM,EAAA,kDAqBeG,mFAAf,SAAAC,IAAA,IAAApP,EAAA8B,EAAA,OAAAsM,KAAApM,KAAA,SAAAqN,GAAA,cAAAA,EAAAnN,KAAAmN,EAAAlN,MAAA,cAAAkN,EAAAnN,KAAA,EAGUlC,EAAM2B,GAAM,gBAHtB0N,EAAAlN,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANVuN,EAAA7M,KAAA6M,EAAAlN,KAAA,EAciBL,EAAMW,OAdvB,cAAA4M,EAAA3M,OAAA,SAAA2M,EAAA7M,MAAA,eAAA6M,EAAAnN,KAAA,GAAAmN,EAAA1M,GAAA0M,EAAA,SAAAA,EAAA3M,OAAA,cAgBWE,GAhBX,yBAAAyM,EAAAxM,SAAAuM,EAAA,kDAqBeE,oFAAf,SAAAC,EAAyCjP,GAAzC,IAAAN,EAAAwP,EAAA,OAAApB,KAAApM,KAAA,SAAAyN,GAAA,cAAAA,EAAAvN,KAAAuN,EAAAtN,MAAA,cAAAsN,EAAAvN,KAAA,EAGUlC,EAAM2B,GAAM,mBAAqBrB,EAH3CmP,EAAAtN,KAAA,EAM6BC,MAAMpC,EAAK,CAClCqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUiN,EANVC,EAAAjN,KAAAiN,EAAAtN,KAAA,EAciBqN,EAAW/M,OAd5B,cAAAgN,EAAA/M,OAAA,SAAA+M,EAAAjN,MAAA,eAAAiN,EAAAvN,KAAA,GAAAuN,EAAA9M,GAAA8M,EAAA,SAAAA,EAAA/M,OAAA,cAgBWE,GAhBX,yBAAA6M,EAAA5M,SAAA0M,EAAA,kDAqBeG,mFAAf,SAAAC,IAAA,IAAA3P,EAAA8B,EAAA,OAAAsM,KAAApM,KAAA,SAAA4N,GAAA,cAAAA,EAAA1N,KAAA0N,EAAAzN,MAAA,cAAAyN,EAAA1N,KAAA,EAGUlC,EAAM2B,GAAM,qBAHtBiO,EAAAzN,KAAA,EAMwBC,MAAMpC,EAAK,CAC7BqC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBATxB,cAMUT,EANV8N,EAAApN,KAAAoN,EAAAzN,KAAA,EAciBL,EAAMW,OAdvB,cAAAmN,EAAAlN,OAAA,SAAAkN,EAAApN,MAAA,eAAAoN,EAAA1N,KAAA,GAAA0N,EAAAjN,GAAAiN,EAAA,SAAAA,EAAAlN,OAAA,cAgBWE,GAhBX,yBAAAgN,EAAA/M,SAAA8M,EAAA,4zMC5MA,IADA,IAKIE,GALA9L,GAAkB,GACb5C,GAAI,GAAIA,GAAI,GAAIA,KACvB4C,GAAMC,KAAK7C,IAMb,IAmNe2O,GAnNiC,SAAC5L,GAAU,IAAA+E,EAEhBC,mBAAsB,MAFNC,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAElD8G,EAFkD5G,EAAA,GAElC6G,EAFkC7G,EAAA,GAAAG,EAIlBJ,mBAAsB,MAJJK,EAAAvE,OAAAoE,EAAA,EAAApE,CAAAsE,EAAA,GAIlD2G,EAJkD1G,EAAA,GAInC2G,EAJmC3G,EAAA,GAOnC,OAAlB0G,GAA6C,OAAnBF,IAC5BF,GAAO3L,EAAME,QACT,CACE9D,GAAI,GACJ6P,SAAU,GACVC,WAAY,GACZC,aAAc,GACdC,MAAO,GACPC,KAAM,IAERrM,EAAMsM,IAIZ,IA0CMC,EAAS,eAAA1L,EAAAC,OAAAC,EAAA,EAAAD,CAAA0L,KAAAvL,KAAG,SAAAC,IAAA,OAAAsL,KAAA1O,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAEhB0N,GAAKvP,GAAK4D,EAAME,QAAU,GAAKyL,GAAKvP,GAFpB+E,EAAAlD,KAAA,EAIVmM,GAAYuB,IAJF,OAMhB3L,EAAMoB,kBANU,wBAAAD,EAAAxC,SAAAuC,MAAH,yBAAAL,EAAAQ,MAAAC,KAAAC,YAAA,GAUf,OAEEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CACEC,KAAMzB,EAAMyB,KACZC,OAAQ1B,EAAM2B,YACdC,SAAS,SACTC,UAAU,GAGV7F,EAAAC,EAAAC,cAACsF,EAAA,EAAMM,OAAP,CACEC,WAAY,WACVC,MAAM,UAERC,aAAW,GAGXjG,EAAAC,EAAAC,cAACsF,EAAA,EAAMU,MAAP,KACGlC,EAAME,QAAU,mBAAqB,UADxC,UAIFlE,EAAAC,EAAAC,cAACsF,EAAA,EAAMW,KAAP,KAEEnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,UAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQkJ,GAAKM,SAAWvJ,OAAOD,EAAEE,OAAOC,QAClDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cACG8D,EAAME,cAA2BxB,IAAhBiN,GAAKpE,OACnB,GADH,GAAAlK,OAEMsO,GAAKpE,OAAOpH,OAFlB,KAAA9C,OAE4BsO,GAAKpE,OAAOnH,WAFxC,KAAA/C,OAEsDsO,GAAKpE,OAAOlH,aAEpEL,EAAMyM,aAAaC,aAAa3P,IAAI,SAAC4P,EAAG1P,GACvC,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,IAAKD,EAAG2F,MAAO+J,EAAEvQ,IAAzB,GAAAiB,OACMsP,EAAExM,OADR,KAAA9C,OACkBsP,EAAEvM,WADpB,KAAA/C,OACkCsP,EAAEtM,iBAO5CrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,YAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQkJ,GAAKO,WAAaxJ,OAAOD,EAAEE,OAAOC,QACpDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cACG8D,EAAME,cAA6BxB,IAAlBiN,GAAK1L,SACnB,GADH,GAAA5C,OAEMsO,GAAK1L,SAASE,OAFpB,KAAA9C,OAE8BsO,GAAK1L,SAASG,WAF5C,KAAA/C,OAE0DsO,GAAK1L,SAASI,aAE1EL,EAAMyM,aAAanH,eAAevI,IAAI,SAAC8G,EAAG5G,GACzC,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,IAAKD,EAAG2F,MAAOiB,EAAEzH,IAAzB,GAAAiB,OACMwG,EAAE1D,OADR,KAAA9C,OACkBwG,EAAEzD,WADpB,KAAA/C,OACkCwG,EAAExD,iBAO5CrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,cAGA7G,EAAAC,EAAAC,cAAA,UACEsG,SAAU,SAACC,GAAD,OAAQkJ,GAAKQ,aAAezJ,OAAOD,EAAEE,OAAOC,QACtDzG,UAAU,cACVC,GAAG,sBAEHJ,EAAAC,EAAAC,cAAA,cACG8D,EAAME,cAA+BxB,IAApBiN,GAAK7C,WACnB,GADH,GAAAzL,OAEMsO,GAAK7C,WAAW3I,OAFtB,UAAA9C,OAEqCsO,GAAK7C,WAAWE,OAEvDhJ,EAAMyM,aAAaG,kBAAkB7P,IAAI,SAAC8P,EAAG5P,GAC5C,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,IAAKD,EAAG2F,MAAOiK,EAAEzQ,IAAzB,GAAAiB,OACMwP,EAAE1M,OADR,WAAA9C,OACwBwP,EAAE7D,WAOlChN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,SAGA7G,EAAAC,EAAAC,cAAC4Q,GAAA,EAAD,CACE3Q,UAAU,cACVyG,MAAOiJ,EACPrJ,SAAU,SAACuK,GAAD,OAAajB,EAAeiB,OAK1C/Q,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmB0G,QAAQ,sBAA5C,QAGA7G,EAAAC,EAAAC,cAAC8Q,GAAA,EAAD,CACE7Q,UAAU,cACVyG,MAAOmJ,EACPvJ,SAAU,SAACuK,GAAD,OAAaf,EAAce,QAM3C/Q,EAAAC,EAAAC,cAACsF,EAAA,EAAMyB,OAAP,KAEEjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPpD,EAAM2B,gBAHV,SASA3F,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAtLpB,WAQnB,GAPA6J,QAAQC,IAAIvB,IAIU,KAApBA,GAAKO,YACa,KAAlBP,GAAKM,UACiB,KAAtBN,GAAKQ,aAELjN,IAAK,SAAU,+BAAgC,cAKjD,GAAsB,OAAlB6M,EAQJ,GAJEJ,GAAKU,KAAON,EAAcoB,qBAIL,OAAnBtB,EAAJ,CAIE,IAAMuB,EAAIvB,EAAewB,UACnBV,EAAId,EAAeyB,WAAa,EAChCrR,EAAI4P,EAAe0B,cACzB5B,GAAKS,MAAL,GAAA/O,OAAgBpB,EAAhB,KAAAoB,OAAqBsP,EAArB,KAAAtP,OAA0B+P,GAI5BtB,EAAe,MACfE,EAAc,MAGdO,IACAvM,EAAM2B,mBAfJzC,IAAK,SAAU,wBAAyB,cARxCA,IAAK,SAAU,uBAAwB,SAuKIuE,KAAzC,uyMCtNR,IA0Ge+J,GA1GyB,SAACxN,GAEvC,IAAMyN,EAAY,eAAA5M,EAAAC,OAAAC,EAAA,EAAAD,CAAA4M,KAAAzM,KAAG,SAAAC,EAAO2C,GAAP,OAAA6J,KAAA5P,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEbkM,GAAYtG,EAAEzH,IAFD,OAKnB4D,EAAMoB,kBALa,wBAAAD,EAAAxC,SAAAuC,MAAH,gBAAA4C,GAAA,OAAAjD,EAAAQ,MAAAC,KAAAC,YAAA,GASlB,OACEvF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mDAEfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBAIJF,EAAAC,EAAAC,cAAA,aACG8D,EAAMiK,MAAMlN,IAAI,SAAC4Q,EAAG1Q,GAEnB,IAAMsK,OACS7I,IAAbiP,EAAEpG,OACE,MADJ,GAAAlK,OAEOsQ,EAAEpG,OAAOpH,OAFhB,KAAA9C,OAE0BsQ,EAAEpG,OAAOnH,WAFnC,KAAA/C,OAEiDsQ,EAAEpG,OAAOlH,YAEtDJ,OACWvB,IAAfiP,EAAE1N,SACE,MADJ,GAAA5C,OAEOsQ,EAAE1N,SAASE,OAFlB,KAAA9C,OAE4BsQ,EAAE1N,SAASG,WAFvC,KAAA/C,OAEqDsQ,EAAE1N,SAASI,YAE5DyI,OACapK,IAAjBiP,EAAE7E,WACE,MADJ,GAAAzL,OAEOsQ,EAAE7E,WAAW3I,OAFpB,UAAA9C,OAEmCsQ,EAAE7E,WAAWE,MAElD,OACEhN,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAI,GAEXjB,EAAAC,EAAAC,cAAA,UAAKe,EAAI,GAETjB,EAAAC,EAAAC,cAAA,UAAKqL,GAELvL,EAAAC,EAAAC,cAAA,UAAK+D,GAELjE,EAAAC,EAAAC,cAAA,UAAK4M,GAEL9M,EAAAC,EAAAC,cAAA,UAAKyR,EAAEvB,MAAM1F,QAAQ,KAAM,MAE3B1K,EAAAC,EAAAC,cAAA,UAAKyR,EAAEtB,MAEPrQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLmR,cAA2BlP,IAAjBiP,EAAE7E,WACZ3M,UAAU,kBACVW,aAAW,aACXsG,QAAS,WACPpD,EAAM6N,SAASF,GACf3N,EAAMiE,YACNjE,EAAMkE,eAGRlI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAQC,KAAM,MAGhBpI,EAAAC,EAAAC,cAAA,UACEO,KAAK,SACLN,UAAU,kBACVyR,cAA2BlP,IAAjBiP,EAAE7E,WACZhM,aAAW,aACXsG,QAAOtC,OAAAC,EAAA,EAAAD,CAAA4M,KAAAzM,KAAE,SAAApC,IAAA,OAAA6O,KAAA5P,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACPiB,IAAK,CACHmF,MAAK,cACLC,KAAI,iDACJnF,KAAM,UAENoF,YAAY,IACXxF,KANH,eAAAyF,EAAA1D,OAAAC,EAAA,EAAAD,CAAA4M,KAAAzM,KAMQ,SAAAtD,EAAOqB,GAAP,OAAA0O,KAAA5P,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEFe,EAFE,CAAAjB,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAIEwP,EAAaE,GAJf,wBAAA5P,EAAAY,SAAAhB,MANR,gBAAA+G,GAAA,OAAAF,EAAAnD,MAAAC,KAAAC,YAAA,IADO,wBAAAzC,EAAAH,SAAAE,OAgBT7C,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAQP,KAAM,gyMCxFhC,IAAIS,GAAM,EAGND,GAAkB,GAqPPkJ,GA3OuB,SAAAjN,GAAgB,IAAbhF,EAAagF,EAAbhF,OAAakJ,EAE5BC,mBAAe,CACrC5I,GAAI,GACJ6P,SAAU,GACVC,WAAY,GACZC,aAAc,GACdC,MAAO,GACPC,KAAM,KAR4CpH,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAE7C4G,EAF6C1G,EAAA,GAEvC8I,EAFuC9I,EAAA,GAU9C4I,EAAW,SAAChK,GAAD,OAAmBkK,EAAQlK,IAVQuB,EAahBJ,mBAAiB,IAbDK,EAAAvE,OAAAoE,EAAA,EAAApE,CAAAsE,EAAA,GAa7C4I,EAb6C3I,EAAA,GAajC4I,EAbiC5I,EAAA,GAAAG,EAcZR,mBAA8B,CACpE4H,kBAAmB,GACnBF,aAAc,GACdpH,eAAgB,KAjBkCG,EAAA3E,OAAAoE,EAAA,EAAApE,CAAA0E,EAAA,GAc7CiH,EAd6ChH,EAAA,GAc/ByI,EAd+BzI,EAAA,GAAAE,EAqB5BX,oBAAkB,GArBUY,EAAA9E,OAAAoE,EAAA,EAAApE,CAAA6E,EAAA,GAqB7ClE,EArB6CmE,EAAA,GAqBvCF,EArBuCE,EAAA,GAuB9C1B,EAAa,kBAAYwB,GAAQ,IAvBayI,EA0BnBnJ,oBAAkB,GA1BCoJ,EAAAtN,OAAAoE,EAAA,EAAApE,CAAAqN,EAAA,GA0B7CtI,EA1B6CuI,EAAA,GA0BjCtI,EA1BiCsI,EAAA,GA2B9CnK,EAAY,kBAAY6B,GAAW,IAGnCC,EAAW,eAAAC,EAAAlF,OAAAC,EAAA,EAAAD,CAAAuN,KAAApN,KAAG,SAAAC,IAAA,IAAAlC,EAAA,OAAAqP,KAAAvQ,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAEA+L,KAFA,eAKNtL,KAHNM,EAFYmC,EAAA7C,OAKe,OAARU,EALP,CAAAmC,EAAAlD,KAAA,eAMhBgQ,EAAc,IACdpJ,IAAO,EAPS1D,EAAA3C,OAAA,wBAYlBqG,GAAM,EACND,GAAU5F,EACViP,EAAcjP,GAdImC,EAAAlD,KAAA,GAeZqQ,IAfY,eAAAnN,EAAAlD,KAAA,GAgBZsQ,IAhBY,yBAAApN,EAAAxC,SAAAuC,MAAH,yBAAA8E,EAAA3E,MAAAC,KAAAC,YAAA,GAkBXH,EAAkB,kBAAqB2E,KAyDvCwI,EAAmB,eAAA/J,EAAA1D,OAAAC,EAAA,EAAAD,CAAAuN,KAAApN,KAAG,SAAApC,IAAA,IAAA2P,EAAAC,EAAA/B,EAAAE,EAAA,OAAAyB,KAAAvQ,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAEpBuQ,EAA0C,CAC9ClJ,eAAgB,GAChBsH,kBAAmB,GACnBF,aAAc,IALU5N,EAAAb,KAAA,EASGyM,KATH,cASpB+D,EAToB3P,EAAAR,KAAAQ,EAAAb,KAAA,EAUCgN,KAVD,cAUpByB,EAVoB5N,EAAAR,KAAAQ,EAAAb,KAAA,EAWMuN,KAXN,OAWpBoB,EAXoB9N,EAAAR,KAa1BkQ,EAAmBlJ,eAAiBmJ,EACpCD,EAAmB9B,aAAeA,EAClC8B,EAAmB5B,kBAAoBA,EAEvC8B,WAAU5N,OAAAC,EAAA,EAAAD,CAAAuN,KAAApN,KAAC,SAAAtD,IAAA,OAAA0Q,KAAAvQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACTiQ,EAAgBM,GAChBP,EAAcrJ,IAFL,wBAAA7G,EAAAY,SAAAhB,MAGR,KApBuB,yBAAAmB,EAAAH,SAAAE,MAAH,yBAAA2F,EAAAnD,MAAAC,KAAAC,YAAA,GAwBnB+M,EAA0B,eAAAK,EAAA7N,OAAAC,EAAA,EAAAD,CAAAuN,KAAApN,KAAG,SAAAsJ,IAAA,OAAA8D,KAAAvQ,KAAA,SAAA2M,GAAA,cAAAA,EAAAzM,KAAAyM,EAAAxM,MAAA,OAEjC2G,GAAQ7H,IAAR,eAAA6R,EAAA9N,OAAAC,EAAA,EAAAD,CAAAuN,KAAApN,KAAY,SAAA1B,EAAOoM,EAAM1O,GAAb,IAAAgD,EAAAsH,EAAAuB,EAAA,OAAAuF,KAAAvQ,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EAEaqM,GAAwBqB,EAAKO,YAF1C,cAEJjM,EAFIR,EAAAnB,KAAAmB,EAAAxB,KAAA,EAGW4M,GAAsBc,EAAKM,UAHtC,cAGJ1E,EAHI9H,EAAAnB,KAAAmB,EAAAxB,KAAA,EAIemN,GAA0BO,EAAKQ,cAJ9C,OAIJrD,EAJIrJ,EAAAnB,KAMVsG,GAAQ3H,GAAGgD,SAAWA,EACtB2E,GAAQ3H,GAAGsK,OAASA,EACpB3C,GAAQ3H,GAAG6L,WAAaA,EARd,yBAAArJ,EAAAd,SAAAY,MAAZ,gBAAAuE,EAAAY,GAAA,OAAAkK,EAAAvN,MAAAC,KAAAC,YAAA,IAFiC,wBAAAkJ,EAAA9L,SAAA4L,MAAH,yBAAAoE,EAAAtN,MAAAC,KAAAC,YAAA,GAgDhC2E,IAAMC,UAAU,WACdJ,KACC,IAGH,IAAMM,EAtCkB,SAACC,EAAWqH,GAGlC,OAFArH,GAAW,IAAPA,GAAyB,IAAbqH,EAAEtK,OAAe,EAAIiD,GAInC,KAAK,EACH,OACEtK,EAAAC,EAAAC,cAAC2S,GAAD,CACE5E,MAAO0D,EACPzJ,WAAYA,EACZD,UAAWA,EACX4J,SAAUA,EACVzM,gBAAiBA,IAIvB,KAAK,EACH,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,qCAIN,QACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,uDAYMsK,CAAgB3B,GAAKmJ,GAGrC,OACEhS,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwK,SAAA,KACEzK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBAAwCN,GACxCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAEdH,EAAAC,EAAAC,cAAA,SACEqG,UAAW,GACXpG,UAAU,eACVM,KAAK,SACL6F,YAAY,SACZxF,aAAW,SACX0F,SAAU,SAACC,GAAD,OApJA,SAACqM,GAKvB,GAAe,MAHfA,EAASA,EAAOpI,QAAQ,KAAM,MAGT9B,GAAQvB,OAAS,EAAG,CAEvC,IAAIsD,EAAmB,GAwCvB,OArCA/B,GAAQgC,QAAQ,SAACC,QAGGnI,IAAhBmI,EAAKU,aACa7I,IAAlBmI,EAAK5G,eACevB,IAApBmI,EAAKiC,WAQc,CACnBjC,EAAKU,OAAOpH,OACZ0G,EAAKU,OAAOnH,WACZyG,EAAKU,OAAOlH,WACZwG,EAAK5G,SAASE,OACd0G,EAAK5G,SAASG,WACdyG,EAAK5G,SAASI,WACdwG,EAAKiC,WAAW3I,OAChB0G,EAAKiC,WAAWE,MAEflC,KAAK,IACLJ,QAAQ,KAAM,IAGInD,QAAQuL,IAGhB,GACXnI,EAAS7G,KAAK+G,GAvBdoH,EAActH,UA4BlBsH,EAActH,GAIhBsH,EAAcrJ,IAkGemK,CAAgBrM,OAAOD,EAAEE,OAAOC,WAGnD5G,EAAAC,EAAAC,cAAA,UACEoB,MAAO,CAAEhB,MAAO,KAChBG,KAAK,SACLN,UAAU,uBACViH,QAAS,WACP0C,GAAW,GACX5B,MANJ,yBAcNlI,EAAAC,EAAAC,cAAA,WAECmK,GAIHrK,EAAAC,EAAAC,cAAC8S,GAAD,CACE1C,GAAIX,EACJlK,KAAMA,EACNvB,QAAS2F,EACTlE,YA5Mc,kBAAY+D,GAAQ,IA6MlCtE,gBAAiBA,EACjB6I,MAAO+D,EACPvB,aAAcA,MCzOPwC,GAzBG,WAChB,OACEjT,EAAAC,EAAAC,cAACgT,EAAA,EAAD,KACElT,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAASpT,EAAAC,EAAAC,cAACmT,GAAD,CAAWxT,OAAO,YAC3CG,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CAAOC,KAAK,SAASC,QAASpT,EAAAC,EAAAC,cAACmT,GAAD,CAAWxT,OAAO,YAChDG,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CAAOC,KAAK,aAAaC,QAASpT,EAAAC,EAAAC,cAACoT,EAAD,CAAezT,OAAO,gBACxDG,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CAAOC,KAAK,WAAWC,QAASpT,EAAAC,EAAAC,cAACqT,GAAD,CAAa1T,OAAO,cACpDG,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CACEC,KAAK,gBACLC,QAASpT,EAAAC,EAAAC,cAACsT,GAAD,CAAkB3T,OAAO,mBAEpCG,EAAAC,EAAAC,cAACgT,EAAA,EAAD,CACEC,KAAK,IACLC,QACEpT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBC,GAAG,uBAApC,wCCDGqT,OAff,WACE,OAEEzT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAEEnB,EAAAC,EAAAC,cAACwT,EAAD,MAEA1T,EAAAC,EAAAC,cAACyT,GAAD,SCFOC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAtN,EAAA,GAAA1D,KAAAgR,EAAAC,KAAA,WAAqBjR,KAAK,SAAA8B,GAAiD,IAA9CoP,EAA8CpP,EAA9CoP,OAAQC,EAAsCrP,EAAtCqP,OAAQC,EAA8BtP,EAA9BsP,OAAQC,EAAsBvP,EAAtBuP,OAAQC,EAAcxP,EAAdwP,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,4CCCDS,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH1U,EAAAC,EAAAC,cAACF,EAAAC,EAAM0U,WAAP,KAEE3U,EAAAC,EAAAC,cAAC0U,GAAA,EAAD,CAAyBC,OAAQC,KAAUC,MAAOC,MAEhDhV,EAAAC,EAAAC,cAAC+U,GAAD,SAQNrB,yBC1BAsB,EAAAC,QAAiBpB,EAAAlM,EAAuB","file":"static/js/main.26fab8b1.chunk.js","sourcesContent":["import { Container, Form, Nav, Navbar } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Img from \"../images/admin.png\";\r\nimport \"../index.css\";\r\n\r\ninterface LinksMenu {\r\n  Titulo: string;\r\n  url: string;\r\n}\r\n\r\n//Urls\r\nconst MenuItems: LinksMenu[] = [\r\n  {\r\n    Titulo: \"Inicio\",\r\n    url: \"\",\r\n  },\r\n  {\r\n    Titulo: \"Citas\",\r\n    url: \"citas\",\r\n  },\r\n  {\r\n    Titulo: \"Pacientes\",\r\n    url: \"pacientes\",\r\n  },\r\n  {\r\n    Titulo: \"Medicos\",\r\n    url: \"medicos\",\r\n  },\r\n  {\r\n    Titulo: \"Habitaciones\",\r\n    url: \"habitaciones\",\r\n  },\r\n];\r\n\r\n//Barra principal\r\nconst PageBarraPrincipal = () => {\r\n  //Devolvemos\r\n  return (\r\n    <div className=\"table table-striped table-hover \">\r\n      {/* Contenedor */}\r\n      <div className=\"collapse\" id=\"navbarToggleExternalContent\">\r\n        <div className=\"container d-flex align-items-center flex-column bg-dark p-4\">\r\n          <h5 className=\"text-white h4\">Centro Médico Omiltemi</h5>\r\n          <img\r\n            alt=\"Img\"\r\n            width=\"80\"\r\n            className=\"d-iine-block align-text-top\"\r\n            src={Img}\r\n          />\r\n          <span className=\"text-white\">Bienvenido</span>\r\n        </div>\r\n      </div>\r\n      {/* Barra Principal */}\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        {/*Boton de la barra */}\r\n        <div className=\"container-fluid\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarToggleExternalContent\"\r\n            aria-controls=\"navbarToggleExternalContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          {/*Conponentes de barra */}\r\n          {MenuItems.map((item, i) => {\r\n            return (\r\n              <li key={i} className=\"nav-link px-2 text-white\">\r\n                <Link\r\n                  className=\"nav-link\"\r\n                  to={`/${item.url}`}\r\n                  style={{ color: \"white\" }}\r\n                >\r\n                  {item.url}\r\n                </Link>\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          <ul className=\"nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0\"></ul>\r\n\r\n          {/*Imagen de perfil */}\r\n          <span className=\"navbar-brand\">\r\n            {\" \"}\r\n            Administrador{\" \"}\r\n            <img\r\n              alt=\"Img\"\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-iine-block align-text-top\"\r\n              src={Img}\r\n            />\r\n          </span>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageBarraPrincipal;\r\n","//Importaciones\r\nimport Paciente from \"./Paciente\";\r\nimport swal from \"sweetalert\";\r\nconst URL = \"http://localhost:1100/api/\";\r\n\r\n//Buscar Pacientes\r\nasync function buscarPacientePorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Paciente/\" + id;\r\n    const url = URL + \"paciente/\" + id;\r\n\r\n    //Respueta\r\n    const Paciente = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Paciente.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Pacientes (Función asincrónica)\r\nasync function buscarPacientes() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"pacientes\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Eliminar Pacientes\r\nasync function removerPaciente(id: string) {\r\n  //Ruta\r\n  const url = URL + \"paciente/eliminar/\" + id;\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo eliminar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro eliminado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Guardar Paciente\r\nasync function guardarPaciente(newPaciente: Paciente) {\r\n  //Ruta\r\n  const url = URL + \"paciente/guardar\";\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newPaciente),\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo guardar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro guardado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Exportaciones\r\nexport {\r\n  buscarPacientes,\r\n  buscarPacientePorId,\r\n  removerPaciente,\r\n  guardarPaciente,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  TelephoneOutboundFill,\r\n  EnvelopeFill,\r\n  PersonFill,\r\n} from \"react-bootstrap-icons\";\r\nimport Paciente from \"./Paciente\";\r\nimport { useHref, useNavigate } from \"react-router-dom\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { guardarPaciente } from \"./ApiPacientes\";\r\n\r\ninterface PropsForm {\r\n  pa: Paciente;\r\n  show: boolean;\r\n  isNuevo: boolean;\r\n  handleClose(): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Arreglo;\r\nlet array: number[] = [];\r\nfor (let i = 1; i < 101; i++) {\r\n  array.push(i);\r\n}\r\n\r\n//Formulario de pacientes\r\nconst PageFormularioPaciente: React.FC<PropsForm> = (Props) => {\r\n  //Paciente\r\n  let paciente: Paciente = Props.isNuevo\r\n    ? {\r\n        id: \"\",\r\n        nombre: \"\",\r\n        apellido_p: \"\",\r\n        apellido_m: \"\",\r\n        edad: 0,\r\n        sexo: \"\",\r\n        telefono: \"\",\r\n        email: \"\",\r\n        direccion: \"\",\r\n      }\r\n    : Props.pa;\r\n\r\n  //Validar datos\r\n  const validarDatos = (): void => {\r\n    //Telefono\r\n    if (paciente.telefono.length !== 10) {\r\n      swal(\"Error!\", \"El telefono debe de tener 10 dígitos!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Edad\r\n    if (paciente.edad < 1 || paciente.edad > 120) {\r\n      swal(\"Error!\", \"Edad no valida!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Sexo\r\n    const s = paciente.sexo;\r\n    if (s !== \"H\" && s !== \"M\" && s !== \"O\" && s !== \"NP\") {\r\n      swal(\"Error!\", \"Sexo no valido!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Apellidos\r\n    if (\r\n      paciente.apellido_p.indexOf(\" \") !== -1 ||\r\n      paciente.apellido_m.indexOf(\" \") !== -1 ||\r\n      paciente.apellido_p.length < 3 ||\r\n      paciente.apellido_m.length < 3\r\n    ) {\r\n      swal(\"Error!\", \"Apellido no valido!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Nombre\r\n    if (paciente.nombre.length < 3) {\r\n      swal(\"Error!\", \"El nombre es demasiado corto!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //email\r\n    if (paciente.email !== \"\") {\r\n      const a = paciente.email.indexOf(\"@\");\r\n      const b = paciente.email.indexOf(\".\");\r\n\r\n      if (a === -1 || b === -1 || paciente.email.length < 6) {\r\n        swal(\"Error!\", \"Email no valido!\", \"error\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    //Validamos y guardamos\r\n    guardarPa();\r\n    Props.handleClose();\r\n  };\r\n\r\n  //Guardar nuevo cliente\r\n  const guardarPa = async () => {\r\n    //Comrobamos id\r\n    paciente.id = Props.isNuevo ? \"\" : paciente.id;\r\n    //Guardamos\r\n    await guardarPaciente(paciente);\r\n    //Actualizamos lista\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  //Formulario\r\n  return (\r\n    // Formulario\r\n    <Modal\r\n      show={Props.show}\r\n      onHide={Props.handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      {/* Boton X */}\r\n      <Modal.Header\r\n        onAuxClick={() => {\r\n          alert(\"Salir\");\r\n        }}\r\n        closeButton\r\n      >\r\n        {/* Titulo */}\r\n        <Modal.Title>\r\n          {Props.isNuevo ? \"Registrar nuevo \" : \"Editar \"} paciente\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      {/* Formulario */}\r\n      <Modal.Body>\r\n        {/* Nombre completo */}\r\n        <div className=\"input-group\">\r\n          <span className=\"input-group-text\">\r\n            <PersonFill />\r\n          </span>\r\n          {/* Nombre */}\r\n          <input\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Z][a-zA-Z0-9-_\\.]{8,20}$\"\r\n            aria-label=\"Nombre\"\r\n            placeholder={Props.isNuevo ? \"Nombre\" : paciente.nombre}\r\n            className=\"form-control\"\r\n            maxLength={25}\r\n            onChange={(e) => (paciente.nombre = String(e.target.value))}\r\n          />\r\n          {/* Apellido paterno */}\r\n          <input\r\n            type=\"text\"\r\n            aria-label=\"Apellido p\"\r\n            placeholder={Props.isNuevo ? \"Apellido p\" : paciente.apellido_p}\r\n            className=\"form-control\"\r\n            maxLength={20}\r\n            onChange={(e) => (paciente.apellido_p = String(e.target.value))}\r\n          />\r\n          {/* Apellido materno */}\r\n          <input\r\n            type=\"text\"\r\n            aria-label=\"Apellido m\"\r\n            placeholder={Props.isNuevo ? \"Apellido m\" : paciente.apellido_m}\r\n            className=\"form-control\"\r\n            maxLength={20}\r\n            onChange={(e) => (paciente.apellido_m = String(e.target.value))}\r\n          />\r\n        </div>\r\n\r\n        {/* Sexo y edad */}\r\n        <div className=\"input-group mb-3\">\r\n          {/* Sexo */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Sexo\r\n          </label>\r\n          <select\r\n            onChange={(e) => (paciente.sexo = String(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : paciente.sexo}</option>\r\n            <option value=\"H\">Hombre</option>\r\n            <option value=\"M\">Mujer</option>\r\n            <option value=\"O\">Otro</option>\r\n            <option value=\"NP\">Prefiero no decirlo</option>\r\n          </select>\r\n          {/* Edad */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Edad\r\n          </label>\r\n          <select\r\n            // value={paciente.edad}\r\n            onChange={(e) => (paciente.edad = Number(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : paciente.edad}</option>\r\n            {array.map((i) => {\r\n              return (\r\n                <option key={i} value={i}>\r\n                  {i}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Telefono y email */}\r\n        <div className=\"input-group mb-3\">\r\n          {/* Telefono */}\r\n          <span className=\"input-group-text\">\r\n            <TelephoneOutboundFill />\r\n          </span>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            placeholder={Props.isNuevo ? \"Telefono\" : paciente.telefono}\r\n            aria-label=\"Telefono\"\r\n            maxLength={10}\r\n            onChange={(e) => (paciente.telefono = String(e.target.value))}\r\n          />\r\n          {/* Email */}\r\n          <span className=\"input-group-text\">\r\n            <EnvelopeFill />\r\n          </span>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            placeholder={Props.isNuevo ? \"Email\" : paciente.email}\r\n            aria-label=\"Email\"\r\n            maxLength={25}\r\n            onChange={(e) => (paciente.email = String(e.target.value))}\r\n          />\r\n        </div>\r\n\r\n        {/* Dirección */}\r\n        <div className=\"input-group\">\r\n          <span className=\"input-group-text\">Dirección</span>\r\n          <textarea\r\n            onChange={(e) => (paciente.direccion = String(e.target.value))}\r\n            className=\"form-control\"\r\n            aria-label=\"With textarea\"\r\n            placeholder={Props.isNuevo ? \"\" : paciente.direccion}\r\n            maxLength={300}\r\n          ></textarea>\r\n        </div>\r\n      </Modal.Body>\r\n\r\n      {/* Botones finales */}\r\n      <Modal.Footer>\r\n        {/* Salir */}\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => {\r\n            Props.handleClose();\r\n          }}\r\n        >\r\n          Salir\r\n        </Button>\r\n        {/* Guardar datos */}\r\n        <Button variant=\"primary\" onClick={() => validarDatos()}>\r\n          Guardar datos\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PageFormularioPaciente;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Pencil, Trash3 } from \"react-bootstrap-icons\";\r\nimport swal from \"sweetalert\";\r\nimport { removerPaciente } from \"./ApiPacientes\";\r\nimport Paciente from \"./Paciente\";\r\n\r\n//Interface\r\ninterface PropsLista {\r\n  pacientes: Paciente[];\r\n  handleShow(): void;\r\n  hastNuevo(): void;\r\n  hastPaciente(p: Paciente): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Tabla de pacientes\r\nconst TablaPaciente: React.FC<PropsLista> = (Props) => {\r\n  //Eliminar paciente\r\n  const eliminarPaciente = async (p: Paciente) => {\r\n    //Eliminamos\r\n    await removerPaciente(p.id);\r\n\r\n    //Actualizamos tabla\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  // Tabla\r\n  return (\r\n    <table className=\"table table-striped table-hover table-bordered \">\r\n      {/* Títulos */}\r\n      <thead>\r\n        <tr>\r\n          <th>No</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido M</th>\r\n          <th>Apellido P</th>\r\n          <th>Sexo</th>\r\n          <th>Edad</th>\r\n          <th>Telefono</th>\r\n          <th>Email</th>\r\n          <th>Dirección</th>\r\n          <th>Opciones</th>\r\n        </tr>\r\n      </thead>\r\n      {/* Recorremos datos */}\r\n      <tbody>\r\n        {Props.pacientes.map((p, i) => {\r\n          return (\r\n            <tr key={i + 1}>\r\n              {/* Numero */}\r\n              <td>{i + 1}</td>\r\n              {/* Nombre */}\r\n              <td>{p.nombre}</td>\r\n              {/* Apellido P */}\r\n              <td>{p.apellido_p}</td>\r\n              {/* Apellido M */}\r\n              <td>{p.apellido_m}</td>\r\n              {/* Sexo */}\r\n              <td>{p.sexo}</td>\r\n              {/* Edad */}\r\n              <td>{p.edad}</td>\r\n              {/* Telefono */}\r\n              <td>{p.telefono}</td>\r\n              {/* Correo */}\r\n              <td>{p.email}</td>\r\n              {/* Dirección */}\r\n              <td>{p.direccion}</td>\r\n              {/* Editar dato */}\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={() => {\r\n                    Props.hastPaciente(p);\r\n                    Props.hastNuevo();\r\n                    Props.handleShow();\r\n                  }}\r\n                >\r\n                  <Pencil size={20} />\r\n                </button>\r\n                {/* Eliminar dato */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={async () => {\r\n                    swal({\r\n                      title: `¿Seguro?`,\r\n                      text: `Si eliminas a ${p.nombre} no podrás recuperarlo`,\r\n                      icon: \"warning\",\r\n                      //buttons: [true],\r\n                      dangerMode: true,\r\n                    }).then(async (willDelete) => {\r\n                      //Aceptar\r\n                      if (willDelete) {\r\n                        //Eliminamos\r\n                        await eliminarPaciente(p);\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  <Trash3 size={20} />\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TablaPaciente;\r\n","import { Trash3, Pencil } from \"react-bootstrap-icons\";\r\nimport PageCalendario from \"../../components/PageCalendario\";\r\nimport React, { useState } from \"react\";\r\nimport PageFormularioPaciente from \"./PageFormularioPaciente\";\r\nimport Paciente from \"./Paciente\";\r\nimport TablaPaciente from \"./TablaPaciente\";\r\nimport { buscarPacientes } from \"./ApiPacientes\";\r\n\r\ninterface PropsPas {\r\n  Titulo: string;\r\n}\r\n\r\n//Opción\r\nlet Obc = 1;\r\n\r\n//Lista\r\nlet LISTA_C: Paciente[];\r\n\r\n//Pacientes\r\nconst PagePacientes: React.FC<PropsPas> = ({ Titulo }) => {\r\n  //Paciente\r\n  const [paciente, setPaciente] = useState<Paciente>({\r\n    id: \"\",\r\n    nombre: \"\",\r\n    apellido_p: \"\",\r\n    apellido_m: \"\",\r\n    sexo: \"\",\r\n    edad: 0,\r\n    telefono: \"\",\r\n    email: \"\",\r\n    direccion: \"\",\r\n  });\r\n  const hastPaciente = (p: Paciente): void => setPaciente(p);\r\n\r\n  //valor por defecto arreglo vacío\r\n  const [listaPacientes, setListaPacientes] = useState<Paciente[]>([]);\r\n\r\n  //Ventana flotante\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const handleClose = (): void => setShow(false);\r\n  const handleShow = (): void => setShow(true);\r\n\r\n  //Editar/Crear\r\n  const [getIsNuevo, setIsNuevo] = useState<boolean>(true);\r\n  const hastNuevo = (): void => setIsNuevo(false);\r\n\r\n  //Buscar pacientes\r\n  const buscarLista = async () => {\r\n    //Buscamos\r\n    const res = await buscarPacientes();\r\n\r\n    //Comprobamos\r\n    if (res === undefined || res === null || res.status > 399) {\r\n      setListaPacientes([]);\r\n      Obc = -1;\r\n      return;\r\n    }\r\n\r\n    //Asignamos\r\n    Obc = 1;\r\n    LISTA_C = res;\r\n    setListaPacientes(res);\r\n  };\r\n  const actualizarLista = (): Promise<void> => buscarLista();\r\n\r\n  //Buscar pacientes por nombre\r\n  const buscarPacientesPorN = (nombre: string) => {\r\n    // Quitamos Espacios\r\n    nombre = nombre.replace(/ /g, \"\");\r\n\r\n    //Si no esta vació\r\n    if (nombre !== \"\") {\r\n      //Lista auxiliar\r\n      let listaAux: Paciente[] = [];\r\n\r\n      //Recorremos\r\n      LISTA_C.forEach((pass) => {\r\n        //Obtenemos las cadenas\r\n        let cadena: string = [pass.nombre, pass.apellido_m, pass.apellido_p]\r\n          .join(\"\")\r\n          .replace(/ /g, \"\");\r\n\r\n        //Buscamos\r\n        const index = cadena.indexOf(nombre);\r\n\r\n        //Comprobamos\r\n        if (index >= 0) {\r\n          listaAux.push(pass);\r\n        }\r\n      });\r\n\r\n      //Ponemos datos\r\n      setListaPacientes(listaAux);\r\n      return;\r\n    }\r\n\r\n    actualizarLista();\r\n  };\r\n\r\n  //Opciones para mostrar\r\n  const OpcionesMostrar = (n: number, p: Paciente[]) => {\r\n    n = n !== -1 && p.length === 0 ? 2 : n;\r\n\r\n    switch (n) {\r\n      //Tabla\r\n      case 1:\r\n        return (\r\n          <TablaPaciente\r\n            pacientes={p}\r\n            handleShow={handleShow}\r\n            hastNuevo={hastNuevo}\r\n            hastPaciente={hastPaciente}\r\n            actualizarLista={actualizarLista}\r\n          />\r\n        );\r\n      //Error\r\n      case 2:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>La lista esta vacía</h2>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>Error, No se pudieron obtener los datos</h2>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  //Actualizamos\r\n  React.useEffect(() => {\r\n    buscarLista();\r\n  }, [location]);\r\n\r\n  //Escojamos opción\r\n  const Mostrar = OpcionesMostrar(Obc, listaPacientes);\r\n\r\n  //Pacientes\r\n  return (\r\n    <>\r\n      <div className=\"table-responsive-sm\">\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\">Gestión de {Titulo}</a>\r\n            <form className=\"d-flex\">\r\n              {/* Buscar */}\r\n              <input\r\n                maxLength={25}\r\n                className=\"form-control\"\r\n                type=\"search\"\r\n                placeholder=\"Buscar\"\r\n                aria-label=\"Search\"\r\n                onChange={(e) => buscarPacientesPorN(String(e.target.value))}\r\n              />\r\n              {/* Agregar nuevo paciente */}\r\n              <button\r\n                style={{ width: 400 }}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-dark\"\r\n                onClick={() => {\r\n                  setIsNuevo(true);\r\n                  handleShow();\r\n                }}\r\n              >\r\n                Agregar Nuevo paciente\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </nav>\r\n        <br />\r\n        {/*Opción escogida */}\r\n        {Mostrar}\r\n      </div>\r\n\r\n      {/* Formulario*/}\r\n      <PageFormularioPaciente\r\n        pa={paciente}\r\n        show={show}\r\n        isNuevo={getIsNuevo}\r\n        handleClose={handleClose}\r\n        actualizarLista={actualizarLista}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PagePacientes;\r\n\r\n","//Importaciones\r\nimport Medico from \"./Medico\";\r\nimport swal from \"sweetalert\";\r\nconst URL = \"http://localhost:1101/api/\";\r\n\r\n//Buscar Medicos\r\nasync function buscarMedicoPorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Medico/\" + id;\r\n    const url = URL + \"medico/\" + id;\r\n\r\n    //Respueta\r\n    const Medico = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Medico.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Medicos (Función asincrónica)\r\nasync function buscarMedicos() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"medicos\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Eliminar Medicos\r\nasync function removerMedico(id: string) {\r\n  //Ruta\r\n  const url = URL + \"medico/eliminar/\" + id;\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo eliminar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro eliminado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Guardar Medico\r\nasync function guardarMedico(newMedico: Medico) {\r\n  //Ruta\r\n  const url = URL + \"medico/guardar\";\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newMedico),\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo guardar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro guardado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Exportaciones\r\nexport {\r\n  buscarMedicos,\r\n  buscarMedicoPorId,\r\n  removerMedico,\r\n  guardarMedico,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  TelephoneOutboundFill,\r\n  EnvelopeFill,\r\n  PersonFill,\r\n} from \"react-bootstrap-icons\";\r\nimport Medico from \"./Medico\";\r\nimport { useHref, useNavigate } from \"react-router-dom\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { guardarMedico } from \"./ApiMedico\";\r\n\r\ninterface PropsForm {\r\n  me: Medico;\r\n  show: boolean;\r\n  isNuevo: boolean;\r\n  handleClose(): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Arreglo;\r\nlet array: number[] = [];\r\nfor (let i = 18; i < 70; i++) {\r\n  array.push(i);\r\n}\r\n\r\n//Formulario de medicos\r\nconst PageFormularioMedico: React.FC<PropsForm> = (Props) => {\r\n  //Medico\r\n  let medico: Medico = Props.isNuevo\r\n    ? {\r\n        id: \"\",\r\n        nombre: \"\",\r\n        apellido_p: \"\",\r\n        apellido_m: \"\",\r\n        telefono: \"\",\r\n        email: \"\",\r\n        especialidad: \"\",\r\n        edad: 0,\r\n      }\r\n    : Props.me;\r\n\r\n  //Validar datos\r\n  const validarDatos = (): void => {\r\n    //Telefono\r\n    if (medico.telefono.length !== 10) {\r\n      swal(\"Error!\", \"El telefono debe de tener 10 dígitos!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Edad\r\n    if (medico.edad < 18 || medico.edad > 75) {\r\n      swal(\"Error!\", \"Edad no valida!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Apellidos\r\n    if (\r\n      medico.apellido_p.indexOf(\" \") !== -1 ||\r\n      medico.apellido_m.indexOf(\" \") !== -1 ||\r\n      medico.apellido_p.length < 3 ||\r\n      medico.apellido_m.length < 3\r\n    ) {\r\n      swal(\"Error!\", \"Apellido no valido!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Nombre\r\n    if (medico.nombre.length < 3) {\r\n      swal(\"Error!\", \"El nombre es demasiado corto!\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    //Especialidad\r\n    if (medico.especialidad.length < 3) {\r\n      swal(\"Error!\", \"La especialidad es demasiado corta!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //email\r\n    if (medico.email.length < 6) {\r\n      const a = medico.email.indexOf(\"@\");\r\n      const b = medico.email.indexOf(\".\");\r\n\r\n      if (a === -1 || b === -1 || medico.email.length < 6) {\r\n        swal(\"Error!\", \"Email no valido!\", \"error\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    //Validamos y guardamos\r\n    guardarPa();\r\n    Props.handleClose();\r\n  };\r\n\r\n  //Guardar nuevo cliente\r\n  const guardarPa = async () => {\r\n    //Comrobamos id\r\n    medico.id = Props.isNuevo ? \"\" : medico.id;\r\n    //Guardamos\r\n    await guardarMedico(medico);\r\n    //Actualizamos lista\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  //Formulario\r\n  return (\r\n    // Formulario\r\n    <Modal\r\n      show={Props.show}\r\n      onHide={Props.handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      {/* Boton X */}\r\n      <Modal.Header\r\n        onAuxClick={() => {\r\n          alert(\"Salir\");\r\n        }}\r\n        closeButton\r\n      >\r\n        {/* Titulo */}\r\n        <Modal.Title>\r\n          {Props.isNuevo ? \"Registrar nuevo \" : \"Editar \"} medico\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      {/* Formulario */}\r\n      <Modal.Body>\r\n        {/* Nombre completo */}\r\n        <div className=\"input-group\">\r\n          <span className=\"input-group-text\">\r\n            <PersonFill />\r\n          </span>\r\n          {/* Nombre */}\r\n          <input\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Z][a-zA-Z0-9-_\\.]{8,20}$\"\r\n            aria-label=\"Nombre\"\r\n            placeholder={Props.isNuevo ? \"Nombre\" : medico.nombre}\r\n            className=\"form-control\"\r\n            maxLength={25}\r\n            onChange={(e) => (medico.nombre = String(e.target.value))}\r\n          />\r\n          {/* Apellido paterno */}\r\n          <input\r\n            type=\"text\"\r\n            aria-label=\"Apellido p\"\r\n            placeholder={Props.isNuevo ? \"Apellido p\" : medico.apellido_p}\r\n            className=\"form-control\"\r\n            maxLength={20}\r\n            onChange={(e) => (medico.apellido_p = String(e.target.value))}\r\n          />\r\n          {/* Apellido materno */}\r\n          <input\r\n            type=\"text\"\r\n            aria-label=\"Apellido m\"\r\n            placeholder={Props.isNuevo ? \"Apellido m\" : medico.apellido_m}\r\n            className=\"form-control\"\r\n            maxLength={20}\r\n            onChange={(e) => (medico.apellido_m = String(e.target.value))}\r\n          />\r\n        </div>\r\n\r\n        {/* Especialidad y edad */}\r\n        <div className=\"input-group mb-3\">\r\n          {/* Especialidad */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Especialidad\r\n          </label>\r\n          <select\r\n            onChange={(e) => (medico.especialidad = String(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : medico.especialidad}</option>\r\n            <option value=\"General\">General</option>\r\n            <option value=\"Dermatología\">Dermatología</option>\r\n            <option value=\"Cardiología \">Cardiología</option>\r\n            <option value=\"Gastroenterología\">Gastroenterología</option>\r\n            <option value=\"Pediatría\">Pediatría</option>\r\n            <option value=\"Psiquiatría \">Psiquiatría</option>\r\n            <option value=\"Urología\">Urología</option>\r\n            <option value=\"Ortopedia\">Ortopedia</option>\r\n            <option value=\"Oftalmología\">Oftalmología</option>\r\n            <option value=\"Infectología \">Infectología</option>\r\n            <option value=\"Dermatología \">Dermatología</option>\r\n            <option value=\"Otro \">Otro</option>\r\n          </select>\r\n          {/* Edad */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Edad\r\n          </label>\r\n          <select\r\n            // value={medico.edad}\r\n            onChange={(e) => (medico.edad = Number(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : medico.edad}</option>\r\n            {array.map((i) => {\r\n              return (\r\n                <option key={i} value={i}>\r\n                  {i}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Telefono y email */}\r\n        <div className=\"input-group mb-3\">\r\n          {/* Telefono */}\r\n          <span className=\"input-group-text\">\r\n            <TelephoneOutboundFill />\r\n          </span>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            placeholder={Props.isNuevo ? \"Telefono\" : medico.telefono}\r\n            aria-label=\"Telefono\"\r\n            maxLength={10}\r\n            onChange={(e) => (medico.telefono = String(e.target.value))}\r\n          />\r\n          {/* Email */}\r\n          <span className=\"input-group-text\">\r\n            <EnvelopeFill />\r\n          </span>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            placeholder={Props.isNuevo ? \"Email\" : medico.email}\r\n            aria-label=\"Email\"\r\n            maxLength={25}\r\n            onChange={(e) => (medico.email = String(e.target.value))}\r\n          />\r\n        </div>\r\n      </Modal.Body>\r\n\r\n      {/* Botones finales */}\r\n      <Modal.Footer>\r\n        {/* Salir */}\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => {\r\n            Props.handleClose();\r\n          }}\r\n        >\r\n          Salir\r\n        </Button>\r\n        {/* Guardar datos */}\r\n        <Button variant=\"primary\" onClick={() => validarDatos()}>\r\n          Guardar datos\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PageFormularioMedico;\r\n\r\n","import React from \"react\";\r\nimport { Pencil, Trash3 } from \"react-bootstrap-icons\";\r\nimport swal from \"sweetalert\";\r\nimport { removerMedico } from \"./ApiMedico\";\r\nimport Medico from \"./Medico\";\r\n\r\n//Interface\r\ninterface PropsLista {\r\n  medicos: Medico[];\r\n  handleShow(): void;\r\n  hastNuevo(): void;\r\n  hastMedico(m: Medico): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Tabla de medicos\r\nconst TablaMedico: React.FC<PropsLista> = (Props) => {\r\n  //Eliminar medico\r\n  const eliminarMedico = async (p: Medico) => {\r\n    //Eliminamos\r\n    await removerMedico(p.id);\r\n\r\n    //Actualizamos tabla\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  // Tabla\r\n  return (\r\n    <table className=\"table table-striped table-hover table-bordered \">\r\n      {/* Títulos */}\r\n      <thead>\r\n        <tr>\r\n          <th>No</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido M</th>\r\n          <th>Apellido P</th>\r\n          <th>Telefono</th>\r\n          <th>Email</th>\r\n          <th>Especialidad</th>\r\n          <th>Edad</th>\r\n          <th>Opciones</th>\r\n        </tr>\r\n      </thead>\r\n      {/* Recorremos datos */}\r\n      <tbody>\r\n        {Props.medicos.map((p, i) => {\r\n          return (\r\n            <tr key={i+1}>\r\n              {/* Numero */}\r\n              <td>{i+1}</td>\r\n              {/* Nombre */}\r\n              <td>{p.nombre}</td>\r\n              {/* Apellido P */}\r\n              <td>{p.apellido_p}</td>\r\n              {/* Apellido M */}\r\n              <td>{p.apellido_m}</td>\r\n              {/* Telefono */}\r\n              <td>{p.telefono}</td>\r\n              {/* Email */}\r\n              <td>{p.email}</td>\r\n              {/* Especialidad */}\r\n              <td>{p.especialidad}</td>\r\n              {/* Edad */}\r\n              <td>{p.edad}</td>\r\n              {/* Editar dato */}\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={() => {\r\n                    Props.hastMedico(p);\r\n                    Props.hastNuevo();\r\n                    Props.handleShow();\r\n                  }}\r\n                >\r\n                  <Pencil size={20} />\r\n                </button>\r\n                {/* Eliminar dato */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={async () => {\r\n                    swal({\r\n                      title: `¿Seguro?`,\r\n                      text: `Si eliminas a ${p.nombre} no podrás recuperarlo`,\r\n                      icon: \"warning\",\r\n                      //buttons: [true],\r\n                      dangerMode: true,\r\n                    }).then(async (willDelete) => {\r\n                      //Aceptar\r\n                      if (willDelete) {\r\n                        //Eliminamos\r\n                        await eliminarMedico(p);\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  <Trash3 size={20} />\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TablaMedico;\r\n","import { Trash3, Pencil } from \"react-bootstrap-icons\";\r\nimport PageCalendario from \"../../components/PageCalendario\";\r\nimport React, { useState } from \"react\";\r\nimport PageFormularioMedico from \"./PageFormularioMedico\";\r\nimport Medico from \"./Medico\";\r\nimport TablaMedico from \"./TablaMedico\";\r\nimport { buscarMedicos } from \"./ApiMedico\";\r\n\r\ninterface PropsPas {\r\n  Titulo: string;\r\n}\r\n\r\n//Opción\r\nlet Obc = 1;\r\n\r\n//Lista\r\nlet LISTA_C: Medico[];\r\n\r\n//Medicos\r\nconst PageMedicos: React.FC<PropsPas> = ({ Titulo }) => {\r\n  //Medico\r\n  const [medico, setMedico] = useState<Medico>({\r\n    id: \"\",\r\n    nombre: \"\",\r\n    apellido_p: \"\",\r\n    apellido_m: \"\",\r\n    telefono: \"\",\r\n    email: \"\",\r\n    especialidad: \"\",\r\n    edad: 0,\r\n  });\r\n  const hastMedico = (p: Medico): void => setMedico(p);\r\n\r\n  //valor por defecto arreglo vacío\r\n  const [listaMedicos, setListaMedicos] = useState<Medico[]>([]);\r\n\r\n  //Ventana flotante\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const handleClose = (): void => setShow(false);\r\n  const handleShow = (): void => setShow(true);\r\n\r\n  //Editar/Crear\r\n  const [getIsNuevo, setIsNuevo] = useState<boolean>(true);\r\n  const hastNuevo = (): void => setIsNuevo(false);\r\n\r\n  //Buscar medicos\r\n  const buscarLista = async () => {\r\n    //Buscamos\r\n    const res = await buscarMedicos();\r\n\r\n    //Comprobamos\r\n    if (res === undefined || res === null || res.status > 399) {\r\n      setListaMedicos([]);\r\n      Obc = -1;\r\n      return;\r\n    }\r\n\r\n    //Asignamos\r\n    Obc = 1;\r\n    LISTA_C = res;\r\n    setListaMedicos(res);\r\n  };\r\n  const actualizarLista = (): Promise<void> => buscarLista();\r\n\r\n  //Buscar medicos por nombre\r\n  const buscarMedicosPorN = (nombre: string) => {\r\n    // Quitamos Espacios\r\n    nombre = nombre.replace(/ /g, \"\");\r\n\r\n    //Si no esta vació\r\n    if (nombre !== \"\") {\r\n      //Lista auxiliar\r\n      let listaAux: Medico[] = [];\r\n\r\n      //Recorremos\r\n      LISTA_C.forEach((pass) => {\r\n        //Obtenemos las cadenas\r\n        let cadena: string = [pass.nombre, pass.apellido_m, pass.apellido_p]\r\n          .join(\"\")\r\n          .replace(/ /g, \"\");\r\n\r\n        //Buscamos\r\n        const index = cadena.indexOf(nombre);\r\n\r\n        //Comprobamos\r\n        if (index >= 0) {\r\n          listaAux.push(pass);\r\n        }\r\n      });\r\n\r\n      //Ponemos datos\r\n      setListaMedicos(listaAux);\r\n      return;\r\n    }\r\n\r\n    actualizarLista();\r\n  };\r\n\r\n  //Opciones para mostrar\r\n  const OpcionesMostrar = (n: number, p: Medico[]) => {\r\n    n = n !== -1 && p.length === 0 ? 2 : n;\r\n\r\n    switch (n) {\r\n      //Tabla\r\n      case 1:\r\n        return (\r\n          <TablaMedico\r\n            medicos={p}\r\n            handleShow={handleShow}\r\n            hastNuevo={hastNuevo}\r\n            hastMedico={hastMedico}\r\n            actualizarLista={actualizarLista}\r\n          />\r\n        );\r\n      //Error\r\n      case 2:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>La lista esta vacía</h2>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>Error, No se pudieron obtener los datos</h2>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  //Actualizamos\r\n  React.useEffect(() => {\r\n    buscarLista();\r\n  }, [location]);\r\n\r\n  //Escojamos opción\r\n  const Mostrar = OpcionesMostrar(Obc, listaMedicos);\r\n\r\n  //Medicos\r\n  return (\r\n    <>\r\n      <div className=\"table-responsive-sm\">\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\">Gestión de {Titulo}</a>\r\n            <form className=\"d-flex\">\r\n              {/* Buscar */}\r\n              <input\r\n                maxLength={25}\r\n                className=\"form-control\"\r\n                type=\"search\"\r\n                placeholder=\"Buscar\"\r\n                aria-label=\"Search\"\r\n                onChange={(e) => buscarMedicosPorN(String(e.target.value))}\r\n              />\r\n              {/* Agregar nuevo medico */}\r\n              <button\r\n                style={{ width: 400 }}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-dark\"\r\n                onClick={() => {\r\n                  setIsNuevo(true);\r\n                  handleShow();\r\n                }}\r\n              >\r\n                Agregar Nuevo medico\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </nav>\r\n        <br />\r\n        {/*Opción escogida */}\r\n        {Mostrar}\r\n      </div>\r\n\r\n      {/* Formulario*/}\r\n      <PageFormularioMedico\r\n        me={medico}\r\n        show={show}\r\n        isNuevo={getIsNuevo}\r\n        handleClose={handleClose}\r\n        actualizarLista={actualizarLista}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageMedicos;\r\n","//Importaciones\r\nimport Habitacion from \"./Habitacion\";\r\nimport swal from \"sweetalert\";\r\nconst URL = \"http://localhost:1102/api/\";\r\n\r\n//Buscar Habitacion\r\nasync function buscarHabitacionPorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Habitacion/\" + id;\r\n    const url = URL + \"habitacion/\" + id;\r\n\r\n    //Respueta\r\n    const Habitacion = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Habitacion.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Habitaciones (Función asincrónica)\r\nasync function buscarHabitaciones() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"habitaciones\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Eliminar Habitacion\r\nasync function removerHabitacion(id: string) {\r\n  //Ruta\r\n  const url = URL + \"habitacion/eliminar/\" + id;\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo eliminar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro eliminado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Guardar Habitacion\r\nasync function guardarHabitacion(newHabitacion: Habitacion) {\r\n  //Ruta\r\n  const url = URL + \"habitacion/guardar\";\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newHabitacion),\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo guardar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro guardado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Exportaciones\r\nexport {\r\n  buscarHabitaciones,\r\n  buscarHabitacionPorId,\r\n  removerHabitacion,\r\n  guardarHabitacion,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  TelephoneOutboundFill,\r\n  EnvelopeFill,\r\n  PersonFill,\r\n} from \"react-bootstrap-icons\";\r\nimport Habitacion from \"./Habitacion\";\r\nimport { useHref, useNavigate } from \"react-router-dom\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { guardarHabitacion } from \"./ApiHabitaciones\";\r\n\r\ninterface PropsForm {\r\n  hab: Habitacion;\r\n  show: boolean;\r\n  isNuevo: boolean;\r\n  handleClose(): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Arreglo;\r\nlet array: number[] = [];\r\nfor (let i = 1; i < 101; i++) {\r\n  array.push(i);\r\n}\r\n\r\n//Formulario de habitaciones\r\nconst PageFormularioHabitacion: React.FC<PropsForm> = (Props) => {\r\n  //Habitacion\r\n  let habitacion: Habitacion = Props.isNuevo\r\n    ? {\r\n        id: \"\",\r\n        nombre: \"\",\r\n        ocupado: -1,\r\n        piso: 0,\r\n      }\r\n    : Props.hab;\r\n\r\n  //Validar datos\r\n  const validarDatos = (): void => {\r\n    //Edad\r\n    if (habitacion.piso < 1 || habitacion.piso > 5) {\r\n      swal(\"Error!\", \"Piso no valido!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Sexo\r\n    const s = habitacion.ocupado;\r\n    if (s !== 1 && s !== 0) {\r\n      swal(\"Error!\", \"No no valido!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Nombre\r\n    if (habitacion.nombre.length < 3) {\r\n      swal(\"Error!\", \"El nombre es demasiado corto!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Validamos y guardamos\r\n    guardarPa();\r\n    Props.handleClose();\r\n  };\r\n\r\n  //Guardar nuevo cliente\r\n  const guardarPa = async () => {\r\n    //Comrobamos id\r\n    habitacion.id = Props.isNuevo ? \"\" : habitacion.id;\r\n    //Guardamos\r\n    await guardarHabitacion(habitacion);\r\n    //Actualizamos lista\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  //Formulario\r\n  return (\r\n    // Formulario\r\n    <Modal\r\n      show={Props.show}\r\n      onHide={Props.handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      {/* Boton X */}\r\n      <Modal.Header\r\n        onAuxClick={() => {\r\n          alert(\"Salir\");\r\n        }}\r\n        closeButton\r\n      >\r\n        {/* Titulo */}\r\n        <Modal.Title>\r\n          {Props.isNuevo ? \"Registrar nuevo \" : \"Editar \"} habitacion\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      {/* Formulario */}\r\n      <Modal.Body>\r\n        {/* Nombre completo */}\r\n        <div className=\"input-group\">\r\n          <span className=\"input-group-text\">\r\n            <PersonFill />\r\n          </span>\r\n          {/* Nombre */}\r\n          <input\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Z][a-zA-Z0-9-_\\.]{8,20}$\"\r\n            aria-label=\"Nombre\"\r\n            placeholder={Props.isNuevo ? \"Nombre\" : habitacion.nombre}\r\n            className=\"form-control\"\r\n            maxLength={25}\r\n            onChange={(e) => (habitacion.nombre = String(e.target.value))}\r\n          />\r\n        </div>\r\n\r\n        {/* Piso y Ocupado */}\r\n        <div className=\"input-group mb-3\">\r\n          {/* Piso */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Piso\r\n          </label>\r\n          <select\r\n            onChange={(e) => (habitacion.piso = Number(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : habitacion.piso}</option>\r\n            <option value=\"1\">Piso 1</option>\r\n            <option value=\"2\">Piso 2</option>\r\n            <option value=\"3\">Piso 3</option>\r\n            <option value=\"4\">Piso 4</option>\r\n          </select>\r\n          {/* Ocupado */}\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Ocupado\r\n          </label>\r\n          <select\r\n            onChange={(e) => (habitacion.ocupado = Number(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>{Props.isNuevo ? \"\" : habitacion.ocupado}</option>\r\n            <option value=\"0\">No</option>\r\n            <option value=\"1\">Si</option>\r\n          </select>\r\n        </div>\r\n      </Modal.Body>\r\n\r\n      {/* Botones finales */}\r\n      <Modal.Footer>\r\n        {/* Salir */}\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => {\r\n            Props.handleClose();\r\n          }}\r\n        >\r\n          Salir\r\n        </Button>\r\n        {/* Guardar datos */}\r\n        <Button variant=\"primary\" onClick={() => validarDatos()}>\r\n          Guardar datos\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PageFormularioHabitacion;\r\n\r\n","import React from \"react\";\r\nimport { Pencil, Trash3 } from \"react-bootstrap-icons\";\r\nimport swal from \"sweetalert\";\r\nimport { removerHabitacion } from \"./ApiHabitaciones\";\r\nimport Habitacion from \"./Habitacion\";\r\n\r\n//Interface\r\ninterface PropsLista {\r\n  habitaciones: Habitacion[];\r\n  handleShow(): void;\r\n  hastNuevo(): void;\r\n  hastHabitacion(ha: Habitacion): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Tabla de habitaciones\r\nconst TablaHabitacion: React.FC<PropsLista> = (Props) => {\r\n  //Eliminar habitacion\r\n  const eliminarHabitacion = async (p: Habitacion) => {\r\n    //Eliminamos\r\n    await removerHabitacion(p.id);\r\n\r\n    //Actualizamos tabla\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  // Tabla\r\n  return (\r\n    <table className=\"table table-striped table-hover table-bordered \">\r\n      {/* Títulos */}\r\n      <thead>\r\n        <tr>\r\n          <th>No</th>\r\n          <th>Nombre</th>\r\n          <th>Piso</th>\r\n          <th>Ocupada</th>\r\n          <th>Opciones</th>\r\n        </tr>\r\n      </thead>\r\n      {/* Recorremos datos */}\r\n      <tbody>\r\n        {Props.habitaciones.map((p, i) => {\r\n          return (\r\n            <tr key={i + 1}>\r\n              {/* Numero */}\r\n              <td>{i + 1}</td>\r\n              {/* Nombre */}\r\n              <td>{p.nombre}</td>\r\n              {/* Piso */}\r\n              <td>{p.piso}</td>\r\n              {/* Ocupado */}\r\n              <td>{p.ocupado === 0 ? \"No\" : \"Si\"}</td>\r\n              {/* Editar dato */}\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={() => {\r\n                    Props.hastHabitacion(p);\r\n                    Props.hastNuevo();\r\n                    Props.handleShow();\r\n                  }}\r\n                >\r\n                  <Pencil size={20} />\r\n                </button>\r\n                {/* Eliminar dato */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={async () => {\r\n                    swal({\r\n                      title: `¿Seguro?`,\r\n                      text: `Si eliminas a ${p.nombre} no podrás recuperarlo`,\r\n                      icon: \"warning\",\r\n                      //buttons: [true],\r\n                      dangerMode: true,\r\n                    }).then(async (willDelete) => {\r\n                      //Aceptar\r\n                      if (willDelete) {\r\n                        //Eliminamos\r\n                        await eliminarHabitacion(p);\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  <Trash3 size={20} />\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TablaHabitacion;\r\n","import { Trash3, Pencil } from \"react-bootstrap-icons\";\r\nimport PageCalendario from \"../../components/PageCalendario\";\r\nimport React, { useState } from \"react\";\r\nimport PageFormularioHabitacion from \"./PageFormularioHabitacion\";\r\nimport Habitacion from \"./Habitacion\";\r\nimport TablaHabitacion from \"./TablaHabitacion\";\r\nimport { buscarHabitaciones } from \"./ApiHabitaciones\";\r\n\r\ninterface PropsPas {\r\n  Titulo: string;\r\n}\r\n\r\n//Opción\r\nlet Obc = 1;\r\n\r\n//Lista\r\nlet LISTA_C: Habitacion[];\r\n\r\n//Habitaciones\r\nconst PageHabitaciones: React.FC<PropsPas> = ({ Titulo }) => {\r\n  //Habitacion\r\n  const [habitacion, setHabitacion] = useState<Habitacion>({\r\n    id: \"\",\r\n    nombre: \"\",\r\n    piso: 0,\r\n    ocupado: 0,\r\n  });\r\n  const hastHabitacion = (p: Habitacion): void => setHabitacion(p);\r\n\r\n  //valor por defecto arreglo vacío\r\n  const [listaHabitaciones, setListaHabitaciones] = useState<Habitacion[]>([]);\r\n\r\n  //Ventana flotante\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const handleClose = (): void => setShow(false);\r\n  const handleShow = (): void => setShow(true);\r\n\r\n  //Editar/Crear\r\n  const [getIsNuevo, setIsNuevo] = useState<boolean>(true);\r\n  const hastNuevo = (): void => setIsNuevo(false);\r\n\r\n  //Buscar habitaciones\r\n  const buscarLista = async () => {\r\n    //Buscamos\r\n    const res = await buscarHabitaciones();\r\n\r\n    //Comprobamos\r\n    if (res === undefined || res === null || res.status > 399) {\r\n      setListaHabitaciones([]);\r\n      Obc = -1;\r\n      return;\r\n    }\r\n\r\n    //Asignamos\r\n    Obc = 1;\r\n    LISTA_C = res;\r\n    setListaHabitaciones(res);\r\n  };\r\n  const actualizarLista = (): Promise<void> => buscarLista();\r\n\r\n  //Buscar habitaciones por nombre\r\n  const buscarHabitacionesPorN = (nombre: string) => {\r\n    // Quitamos Espacios\r\n    nombre = nombre.replace(/ /g, \"\");\r\n\r\n    //Si no esta vació\r\n    if (nombre !== \"\") {\r\n      //Lista auxiliar\r\n      let listaAux: Habitacion[] = [];\r\n\r\n      //Recorremos\r\n      LISTA_C.forEach((pass) => {\r\n        //Obtenemos las cadenas\r\n        let cadena: string = [pass.nombre, pass.piso]\r\n          .join(\"\")\r\n          .replace(/ /g, \"\");\r\n\r\n        //Buscamos\r\n        const index = cadena.indexOf(nombre);\r\n\r\n        //Comprobamos\r\n        if (index >= 0) {\r\n          listaAux.push(pass);\r\n        }\r\n      });\r\n\r\n      //Ponemos datos\r\n      setListaHabitaciones(listaAux);\r\n      return;\r\n    }\r\n\r\n    actualizarLista();\r\n  };\r\n\r\n  //Opciones para mostrar\r\n  const OpcionesMostrar = (n: number, p: Habitacion[]) => {\r\n    n = n !== -1 && p.length === 0 ? 2 : n;\r\n\r\n    switch (n) {\r\n      //Tabla\r\n      case 1:\r\n        return (\r\n          <TablaHabitacion\r\n            habitaciones={p}\r\n            handleShow={handleShow}\r\n            hastNuevo={hastNuevo}\r\n            hastHabitacion={hastHabitacion}\r\n            actualizarLista={actualizarLista}\r\n          />\r\n        );\r\n      //Error\r\n      case 2:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>La lista esta vacía</h2>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>Error, No se pudieron obtener los datos</h2>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  //Actualizamos\r\n  React.useEffect(() => {\r\n    buscarLista();\r\n  }, [location]);\r\n\r\n  //Escojamos opción\r\n  const Mostrar = OpcionesMostrar(Obc, listaHabitaciones);\r\n\r\n  //Habitaciones\r\n  return (\r\n    <>\r\n      <div className=\"table-responsive-sm\">\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\">Gestión de {Titulo}</a>\r\n            <form className=\"d-flex\">\r\n              {/* Buscar */}\r\n              <input\r\n                maxLength={25}\r\n                className=\"form-control\"\r\n                type=\"search\"\r\n                placeholder=\"Buscar\"\r\n                aria-label=\"Search\"\r\n                onChange={(e) => buscarHabitacionesPorN(String(e.target.value))}\r\n              />\r\n              {/* Agregar nuevo habitacion */}\r\n              <button\r\n                style={{ width: 400 }}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-dark\"\r\n                onClick={() => {\r\n                  setIsNuevo(true);\r\n                  handleShow();\r\n                }}\r\n              >\r\n                Agregar Nuevo habitacion\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </nav>\r\n        <br />\r\n        {/*Opción escogida */}\r\n        {Mostrar}\r\n      </div>\r\n\r\n      {/* Formulario*/}\r\n      <PageFormularioHabitacion\r\n        hab={habitacion}\r\n        show={show}\r\n        isNuevo={getIsNuevo}\r\n        handleClose={handleClose}\r\n        actualizarLista={actualizarLista}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageHabitaciones;\r\n","//Importaciones\r\nimport Cita from \"./Cita\";\r\nimport swal from \"sweetalert\";\r\nconst URL = \"http://localhost:1103/api/\";\r\n\r\n//Buscar Cita\r\nasync function buscarCitaPorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Cita/\" + id;\r\n    const url = URL + \"cita/\" + id;\r\n\r\n    //Respueta\r\n    const Cita = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Cita.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Cita (Función asincrónica)\r\nasync function buscarCitas() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"citas\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    const citas: Cita[] = await lista.json();\r\n\r\n    //Error\r\n    if (lista.status > 399) {\r\n      return undefined;\r\n    }\r\n\r\n    return citas;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Eliminar Cita\r\nasync function removerCita(id: string) {\r\n  //Ruta\r\n  const url = URL + \"cita/eliminar/\" + id;\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo eliminar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro eliminado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Guardar Cita\r\nasync function guardarCita(newCita: Cita) {\r\n  //Ruta\r\n  const url = URL + \"cita/guardar\";\r\n\r\n  //Enviar\r\n  await fetch(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newCita),\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //Comprobamos estatus\r\n      if (res.status > 399) {\r\n        swal(`Error ${res.status}, No se pudo guardar el registro`, {\r\n          icon: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      //Éxito\r\n      swal(\"Éxito, Registro guardado correctamente! \", {\r\n        icon: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      swal(`Error, ${err}`, {\r\n        icon: \"error\",\r\n      });\r\n    });\r\n}\r\n\r\n//Buscar Pacientes por id\r\nasync function buscarCitaPacientePorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Paciente/\" + id;\r\n    const url = URL + \"cita/paciente/\" + id;\r\n\r\n    //Respueta\r\n    const Paciente = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Paciente.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Lista de pacientes\r\nasync function buscarListaDePacientes() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"citas/pacientes\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Medicos por id\r\nasync function buscarCitaMedicoPorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Medico/\" + id;\r\n    const url = URL + \"cita/medico/\" + id;\r\n\r\n    //Respueta\r\n    const Medico = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Medico.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Lista de medicos\r\nasync function buscarListaDeMedicos() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"citas/medicos\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Buscar Habitaciones por id\r\nasync function buscarCitaHabitacionPorId(id: string) {\r\n  try {\r\n    // process.env.REACT_APP_BASE_URL + \"Habitacion/\" + id;\r\n    const url = URL + \"cita/habitacion/\" + id;\r\n\r\n    //Respueta\r\n    const Habitacion = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await Habitacion.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Lista de habitaciones\r\nasync function buscarListaDeHabitaciones() {\r\n  try {\r\n    //Ruta\r\n    const url = URL + \"citas/habitaciones\";\r\n\r\n    //Respueta\r\n    const lista = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    //Devolvemos un json\r\n    return await lista.json();\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Exportaciones\r\nexport {\r\n  buscarCitas,\r\n  buscarCitaPorId,\r\n  removerCita,\r\n  guardarCita,\r\n  buscarCitaPacientePorId,\r\n  buscarCitaHabitacionPorId,\r\n  buscarCitaMedicoPorId,\r\n  buscarListaDeHabitaciones,\r\n  buscarListaDeMedicos,\r\n  buscarListaDePacientes,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport swal from \"sweetalert\";\r\nimport Cita from \"./Cita\";\r\nimport { useHref, useNavigate } from \"react-router-dom\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { guardarCita } from \"./ApiCitas\";\r\nimport { listaDeNombresCitas } from \"./PageCitas\";\r\n\r\ninterface PropsForm {\r\n  ci: Cita;\r\n  show: boolean;\r\n  isNuevo: boolean;\r\n  listaNombres: listaDeNombresCitas;\r\n  citas: Cita[];\r\n  handleClose(): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Arreglo;\r\nlet array: number[] = [];\r\nfor (let i = 18; i < 70; i++) {\r\n  array.push(i);\r\n}\r\n\r\nlet cita: Cita;\r\n\r\n//Formulario de citas\r\nconst PageFormularioCita: React.FC<PropsForm> = (Props) => {\r\n  //Fecha seleccionada\r\n  const [getFechaSelect, setFechaSelect] = useState<Date | null>(null);\r\n  //Hora seleccionada\r\n  const [getHoraSelect, setHoraSelect] = useState<Date | null>(null);\r\n\r\n  //Cita\r\n  if (getHoraSelect === null && getFechaSelect === null) {\r\n    cita = Props.isNuevo\r\n      ? {\r\n          id: \"\",\r\n          idmedico: \"\",\r\n          idpaciente: \"\",\r\n          idhabitacion: \"\",\r\n          fecha: \"\",\r\n          hora: \"\",\r\n        }\r\n      : Props.ci;\r\n  }\r\n\r\n  //Validar datos\r\n  const validarDatos = (): void => {\r\n    console.log(cita);\r\n\r\n    //Selecciones\r\n    const v =\r\n      cita.idpaciente === \"\" ||\r\n      cita.idmedico === \"\" ||\r\n      cita.idhabitacion === \"\";\r\n    if (v) {\r\n      swal(\"Error!\", \"Selecciona todos los campos!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    //Hora\r\n    if (getHoraSelect === null) {\r\n      swal(\"Error!\", \"Selecciona una hora!\", \"error\");\r\n      return;\r\n    } else {\r\n      cita.hora = getHoraSelect.toLocaleTimeString();\r\n    }\r\n\r\n    //Fecha\r\n    if (getFechaSelect === null) {\r\n      swal(\"Error!\", \"Selecciona una fecha!\", \"error\");\r\n      return;\r\n    } else {\r\n      const d = getFechaSelect.getDate();\r\n      const m = getFechaSelect.getMonth() + 1;\r\n      const a = getFechaSelect.getFullYear();\r\n      cita.fecha = `${a}-${m}-${d}`;\r\n    }\r\n\r\n    //Ponemos null\r\n    setFechaSelect(null);\r\n    setHoraSelect(null);\r\n\r\n    //Validamos y guardamos\r\n    guardarCi();\r\n    Props.handleClose();\r\n  };\r\n\r\n  //Guardar nueva cita\r\n  const guardarCi = async () => {\r\n    //Comprobamos id\r\n    cita.id = Props.isNuevo ? \"\" : cita.id;\r\n    //Guardamos\r\n    await guardarCita(cita);\r\n    // Actualizamos lista\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  //Formulario\r\n  return (\r\n    // Formulario\r\n    <Modal\r\n      show={Props.show}\r\n      onHide={Props.handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      {/* Boton X */}\r\n      <Modal.Header\r\n        onAuxClick={() => {\r\n          alert(\"Salir\");\r\n        }}\r\n        closeButton\r\n      >\r\n        {/* Titulo */}\r\n        <Modal.Title>\r\n          {Props.isNuevo ? \"Registrar nueva \" : \"Editar \"} cita\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {/* Medico*/}\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Medico\r\n          </label>\r\n          <select\r\n            onChange={(e) => (cita.idmedico = String(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>\r\n              {Props.isNuevo || cita.medico === undefined\r\n                ? \"\"\r\n                : `${cita.medico.nombre} ${cita.medico.apellido_p} ${cita.medico.apellido_m}`}\r\n            </option>\r\n            {Props.listaNombres.ListaMedicos.map((m, i) => {\r\n              return (\r\n                <option key={i} value={m.id}>\r\n                  {`${m.nombre} ${m.apellido_p} ${m.apellido_m}`}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        {/* paciente*/}\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Paciente\r\n          </label>\r\n          <select\r\n            onChange={(e) => (cita.idpaciente = String(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>\r\n              {Props.isNuevo || cita.paciente === undefined\r\n                ? \"\"\r\n                : `${cita.paciente.nombre} ${cita.paciente.apellido_p} ${cita.paciente.apellido_m}`}\r\n            </option>\r\n            {Props.listaNombres.listaPacientes.map((p, i) => {\r\n              return (\r\n                <option key={i} value={p.id}>\r\n                  {`${p.nombre} ${p.apellido_p} ${p.apellido_m}`}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        {/* habitaciones*/}\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Habitacion\r\n          </label>\r\n          <select\r\n            onChange={(e) => (cita.idhabitacion = String(e.target.value))}\r\n            className=\"form-select\"\r\n            id=\"inputGroupSelect01\"\r\n          >\r\n            <option>\r\n              {Props.isNuevo || cita.habitacion === undefined\r\n                ? \"\"\r\n                : `${cita.habitacion.nombre} piso ${cita.habitacion.piso}`}\r\n            </option>\r\n            {Props.listaNombres.ListaHabitaciones.map((h, i) => {\r\n              return (\r\n                <option key={i} value={h.id}>\r\n                  {`${h.nombre}, Piso ${h.piso}`}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        {/* fecha*/}\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Fecha\r\n          </label>\r\n          <DatePicker\r\n            className=\"form-select\"\r\n            value={getFechaSelect}\r\n            onChange={(newDate) => setFechaSelect(newDate)}\r\n          ></DatePicker>\r\n        </div>\r\n\r\n        {/* Hora*/}\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\r\n            Hora\r\n          </label>\r\n          <TimePicker\r\n            className=\"form-select\"\r\n            value={getHoraSelect}\r\n            onChange={(newDate) => setHoraSelect(newDate)}\r\n          ></TimePicker>\r\n        </div>\r\n      </Modal.Body>\r\n\r\n      {/* Botones finales */}\r\n      <Modal.Footer>\r\n        {/* Salir */}\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => {\r\n            Props.handleClose();\r\n          }}\r\n        >\r\n          Salir\r\n        </Button>\r\n        {/* Guardar datos */}\r\n        <Button variant=\"primary\" onClick={() => validarDatos()}>\r\n          Guardar datos\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PageFormularioCita;\r\n","import React, { useEffect } from \"react\";\r\nimport { Pencil, Trash3 } from \"react-bootstrap-icons\";\r\nimport swal from \"sweetalert\";\r\nimport Paciente from \"../pacientes/Paciente\";\r\nimport { removerCita } from \"./ApiCitas\";\r\nimport Cita from \"./Cita\";\r\n\r\n//Interface\r\ninterface PropsLista {\r\n  citas: Cita[];\r\n  handleShow(): void;\r\n  hastNuevo(): void;\r\n  hastCita(s: Cita): void;\r\n  actualizarLista(): Promise<void>;\r\n}\r\n\r\n//Tabla de citas\r\nconst TablaCita: React.FC<PropsLista> = (Props) => {\r\n  //Eliminar cita\r\n  const eliminarCita = async (p: Cita) => {\r\n    //Eliminamos\r\n    await removerCita(p.id);\r\n\r\n    //Actualizamos tabla\r\n    Props.actualizarLista();\r\n  };\r\n\r\n  // Tabla\r\n  return (\r\n    <table className=\"table table-striped table-hover table-bordered \">\r\n      {/* Títulos */}\r\n      <thead>\r\n        <tr>\r\n          <th>No</th>\r\n          <th>Medico</th>\r\n          <th>Paciente</th>\r\n          <th>Habitacion</th>\r\n          <th>Fecha</th>\r\n          <th>Hora</th>\r\n          <th>Opciones</th>\r\n        </tr>\r\n      </thead>\r\n      {/* Recorremos datos */}\r\n      <tbody>\r\n        {Props.citas.map((c, i) => {\r\n          //Nombres\r\n          const medico =\r\n            c.medico === undefined\r\n              ? \"...\"\r\n              : `${c.medico.nombre} ${c.medico.apellido_p} ${c.medico.apellido_m}`;\r\n\r\n          const paciente =\r\n            c.paciente === undefined\r\n              ? \"...\"\r\n              : `${c.paciente.nombre} ${c.paciente.apellido_p} ${c.paciente.apellido_m}`;\r\n\r\n          const habitacion =\r\n            c.habitacion === undefined\r\n              ? \"...\"\r\n              : `${c.habitacion.nombre} Piso ${c.habitacion.piso}`;\r\n\r\n          return (\r\n            <tr key={i + 1}>\r\n              {/* Numero */}\r\n              <td>{i + 1}</td>\r\n              {/* Medico */}\r\n              <td>{medico}</td>\r\n              {/* Paciente */}\r\n              <td>{paciente}</td>\r\n              {/* Habitacion */}\r\n              <td>{habitacion}</td>\r\n              {/* Fecha */}\r\n              <td>{c.fecha.replace(/-/g, \"/\")}</td>\r\n              {/* Hora */}\r\n              <td>{c.hora}</td>\r\n              {/* Editar dato */}\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  disabled={c.habitacion === undefined}\r\n                  className=\"btn btn-default\"\r\n                  aria-label=\"Left Align\"\r\n                  onClick={() => {\r\n                    Props.hastCita(c);\r\n                    Props.hastNuevo();\r\n                    Props.handleShow();\r\n                  }}\r\n                >\r\n                  <Pencil size={20} />\r\n                </button>\r\n                {/* Eliminar dato */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default\"\r\n                  disabled={c.habitacion === undefined}\r\n                  aria-label=\"Left Align\"\r\n                  onClick={async () => {\r\n                    swal({\r\n                      title: `¿Seguro?`,\r\n                      text: `Si eliminas esta cita no podrás recuperarla`,\r\n                      icon: \"warning\",\r\n                      //buttons: [true],\r\n                      dangerMode: true,\r\n                    }).then(async (res) => {\r\n                      //Aceptar\r\n                      if (res) {\r\n                        //Eliminamos\r\n                        await eliminarCita(c);\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  <Trash3 size={20} />\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TablaCita;\r\n","import { Trash3, Pencil } from \"react-bootstrap-icons\";\r\nimport PageCalendario from \"../../components/PageCalendario\";\r\nimport React, { useState } from \"react\";\r\nimport PageFormularioCita from \"./PageFormularioCita\";\r\nimport Cita from \"./Cita\";\r\nimport TablaCita from \"./TablaCita\";\r\nimport {\r\n  buscarCitaHabitacionPorId,\r\n  buscarCitaMedicoPorId,\r\n  buscarCitaPacientePorId,\r\n  buscarCitas,\r\n  buscarListaDeHabitaciones,\r\n  buscarListaDeMedicos,\r\n  buscarListaDePacientes,\r\n} from \"./ApiCitas\";\r\nimport Paciente from \"../pacientes/Paciente\";\r\nimport Medico from \"../medicos/Medico\";\r\nimport Habitacion from \"../habitaciones/Habitacion\";\r\n\r\ninterface PropsPas {\r\n  Titulo: string;\r\n}\r\n\r\n//Opción\r\nlet Obc = 1;\r\n\r\n//Lista\r\nlet LISTA_C: Cita[] = [];\r\n\r\n//Listas de con nombres\r\nexport interface listaDeNombresCitas {\r\n  listaPacientes: Paciente[];\r\n  ListaMedicos: Medico[];\r\n  ListaHabitaciones: Habitacion[];\r\n}\r\n\r\n//Citas\r\nconst PageCitas: React.FC<PropsPas> = ({ Titulo }) => {\r\n  //Cita\r\n  const [cita, setCita] = useState<Cita>({\r\n    id: \"\",\r\n    idmedico: \"\",\r\n    idpaciente: \"\",\r\n    idhabitacion: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n  });\r\n  const hastCita = (p: Cita): void => setCita(p);\r\n\r\n  //valor por defecto arreglo vacío\r\n  const [listaCitas, setListaCitas] = useState<Cita[]>([]);\r\n  const [listaNombres, setListaNombres] = useState<listaDeNombresCitas>({\r\n    ListaHabitaciones: [],\r\n    ListaMedicos: [],\r\n    listaPacientes: [],\r\n  });\r\n\r\n  //Ventana flotante\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const handleClose = (): void => setShow(false);\r\n  const handleShow = (): void => setShow(true);\r\n\r\n  //Editar/Crear\r\n  const [getIsNuevo, setIsNuevo] = useState<boolean>(true);\r\n  const hastNuevo = (): void => setIsNuevo(false);\r\n\r\n  //Buscar citas\r\n  const buscarLista = async () => {\r\n    //Buscamos\r\n    const res = await buscarCitas();\r\n\r\n    //Comprobamos\r\n    if (res === undefined || res === null) {\r\n      setListaCitas([]);\r\n      Obc = -1;\r\n      return;\r\n    }\r\n\r\n    //Asignamos\r\n    Obc = 1;\r\n    LISTA_C = res;\r\n    setListaCitas(res);\r\n    await obtenerListaDeNombresPorId();\r\n    await obtenerListaNombres();\r\n  };\r\n  const actualizarLista = (): Promise<void> => buscarLista();\r\n\r\n  //Buscar citas por nombre\r\n  const buscarCitasPorN = (cadena: string) => {\r\n    // Quitamos Espacios\r\n    cadena = cadena.replace(/ /g, \"\");\r\n\r\n    //Si no esta vació\r\n    if (cadena !== \"\" || LISTA_C.length < 1) {\r\n      //Lista auxiliar\r\n      let listaAux: Cita[] = [];\r\n\r\n      //Recorremos\r\n      LISTA_C.forEach((pass) => {\r\n        //Comprobamos\r\n        if (\r\n          pass.medico === undefined ||\r\n          pass.paciente === undefined ||\r\n          pass.habitacion === undefined\r\n        ) {\r\n          //Ponemos datos\r\n          setListaCitas(listaAux);\r\n          return;\r\n        }\r\n\r\n        //Obtenemos las cadenas\r\n        let nombre: string = [\r\n          pass.medico.nombre,\r\n          pass.medico.apellido_p,\r\n          pass.medico.apellido_m,\r\n          pass.paciente.nombre,\r\n          pass.paciente.apellido_p,\r\n          pass.paciente.apellido_m,\r\n          pass.habitacion.nombre,\r\n          pass.habitacion.piso,\r\n        ]\r\n          .join(\"\")\r\n          .replace(/ /g, \"\");\r\n\r\n        //Buscamos\r\n        const index = nombre.indexOf(cadena);\r\n\r\n        //Comprobamos\r\n        if (index >= 0) {\r\n          listaAux.push(pass);\r\n        }\r\n      });\r\n\r\n      //Ponemos datos\r\n      setListaCitas(listaAux);\r\n      return;\r\n    }\r\n\r\n    setListaCitas(LISTA_C);\r\n  };\r\n\r\n  //Obtener nombres por id\r\n  const obtenerListaNombres = async () => {\r\n    //Llenamos las listas completas\r\n    const ListasAuxCompletas: listaDeNombresCitas = {\r\n      listaPacientes: [],\r\n      ListaHabitaciones: [],\r\n      ListaMedicos: [],\r\n    };\r\n\r\n    //Buscamos\r\n    const ListaPacientes = await buscarListaDePacientes();\r\n    const ListaMedicos = await buscarListaDeMedicos();\r\n    const ListaHabitaciones = await buscarListaDeHabitaciones();\r\n    //Agregamos\r\n    ListasAuxCompletas.listaPacientes = ListaPacientes;\r\n    ListasAuxCompletas.ListaMedicos = ListaMedicos;\r\n    ListasAuxCompletas.ListaHabitaciones = ListaHabitaciones;\r\n\r\n    setTimeout(async () => {\r\n      setListaNombres(ListasAuxCompletas);\r\n      setListaCitas(LISTA_C);\r\n    }, 500);\r\n  };\r\n\r\n  //Obtener nombres por id\r\n  const obtenerListaDeNombresPorId = async () => {\r\n    //Recorremos por id\r\n    LISTA_C.map(async (cita, i) => {\r\n      //Buscamos\r\n      const paciente = await buscarCitaPacientePorId(cita.idpaciente);\r\n      const medico = await buscarCitaMedicoPorId(cita.idmedico);\r\n      const habitacion = await buscarCitaHabitacionPorId(cita.idhabitacion);\r\n      //Agregamos\r\n      LISTA_C[i].paciente = paciente;\r\n      LISTA_C[i].medico = medico;\r\n      LISTA_C[i].habitacion = habitacion;\r\n    });\r\n  };\r\n\r\n  //Opciones para mostrar\r\n  const OpcionesMostrar = (n: number, c: Cita[]) => {\r\n    n = n !== -1 && c.length === 0 ? 2 : n;\r\n\r\n    switch (n) {\r\n      //Tabla\r\n      case 1:\r\n        return (\r\n          <TablaCita\r\n            citas={c}\r\n            handleShow={handleShow}\r\n            hastNuevo={hastNuevo}\r\n            hastCita={hastCita}\r\n            actualizarLista={actualizarLista}\r\n          />\r\n        );\r\n      //Error\r\n      case 2:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>La lista esta vacía</h2>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div className=\"align-items-center\">\r\n            <h2>Error, No se pudieron obtener los datos</h2>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  //Actualizamos\r\n  React.useEffect(() => {\r\n    buscarLista();\r\n  }, []);\r\n\r\n  //Escojamos opción\r\n  const Mostrar = OpcionesMostrar(Obc, listaCitas);\r\n\r\n  //Citas\r\n  return (\r\n    <>\r\n      <div className=\"table-responsive-sm\">\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\">Gestión de {Titulo}</a>\r\n            <form className=\"d-flex\">\r\n              {/* Buscar */}\r\n              <input\r\n                maxLength={25}\r\n                className=\"form-control\"\r\n                type=\"search\"\r\n                placeholder=\"Buscar\"\r\n                aria-label=\"Search\"\r\n                onChange={(e) => buscarCitasPorN(String(e.target.value))}\r\n              />\r\n              {/* Agregar nuevo cita */}\r\n              <button\r\n                style={{ width: 400 }}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-dark\"\r\n                onClick={() => {\r\n                  setIsNuevo(true);\r\n                  handleShow();\r\n                }}\r\n              >\r\n                Agregar Nuevo cita\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </nav>\r\n        <br />\r\n        {/*Opción escogida */}\r\n        {Mostrar}\r\n      </div>\r\n\r\n      {/* Formulario*/}\r\n      <PageFormularioCita\r\n        ci={cita}\r\n        show={show}\r\n        isNuevo={getIsNuevo}\r\n        handleClose={handleClose}\r\n        actualizarLista={actualizarLista}\r\n        citas={listaCitas}\r\n        listaNombres={listaNombres}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageCitas;\r\n","import { Routes, Route } from \"react-router-dom\";\r\nimport PagePacientes from \"../pages/pacientes/PagePacientes\";\r\nimport React from \"react\";\r\nimport PageMedicos from \"../pages/medicos/PageMedicos\";\r\nimport PageHabitaciones from \"../pages/habitaciones/PageHabitaciones\";\r\nimport PageCitas from \"../pages/citas/PageCitas\";\r\n\r\n//Rutas\r\nconst PageRutas = () => {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<PageCitas Titulo=\"citas\" />} />\r\n      <Route path=\"/citas\" element={<PageCitas Titulo=\"citas\" />} />\r\n      <Route path=\"/pacientes\" element={<PagePacientes Titulo=\"pacientes\" />} />\r\n      <Route path=\"/medicos\" element={<PageMedicos Titulo=\"medicos\" />} />\r\n      <Route\r\n        path=\"/habitaciones\"\r\n        element={<PageHabitaciones Titulo=\"habitaciones\" />}\r\n      />\r\n      <Route\r\n        path=\"*\"\r\n        element={\r\n          <div className=\"modal-body\">\r\n            <h2 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">\r\n              ERROR 404, Pagina no disponible\r\n            </h2>\r\n          </div>\r\n        }\r\n      />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default PageRutas;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport PageBarraPrincipal from \"./components/PageBarraPrincipal\";\nimport PageRutas from \"./components/PageRutas\";\n\nfunction App() {\n  return (\n    //Cuerpo principal\n    <div className=\"App\">\n      {/*Contenedor de rutas */}\n      <BrowserRouter>\n        {/*Barra*/}\n        <PageBarraPrincipal />\n        {/*Rutas */}\n        <PageRutas />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport esLocale from \"date-fns/locale/es\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    {/* Contenedor de material-ui */}\n    <MuiPickersUtilsProvider locale={esLocale} utils={DateFnsUtils}>\n      {/* Pagina */}\n      <App />\n    </MuiPickersUtilsProvider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/admin.9584e81a.png\";"],"sourceRoot":""}